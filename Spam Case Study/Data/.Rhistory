length(grep("[0-9]+$", login)) > 0
},
# identifies if all alpha characters in the subject line are upper case
isYelling =
function(msg)
{
if ( "Subject" %in% names(msg$header) ) {
el = gsub("[^[:alpha:]]", "", msg$header["Subject"])
if (nchar(el) > 0) nchar(gsub("[A-Z]", "", el)) < 1
else FALSE
}
else
NA
},
forwards =
function(msg)
{
x = msg$body
if(length(x) == 0 || sum(nchar(x)) == 0)
return(NA)
ans = length(grep("^[[:space:]]*>", x))
100 * ans / length(x)
},
isOrigMsg =
function(msg)
{
x = msg$body
if(length(x) == 0) return(NA)
length(grep("^[^[:alpha:]]*original[^[:alpha:]]+message[^[:alpha:]]*$",
tolower(x) ) ) > 0
},
isDear =
function(msg)
{
x = msg$body
if(length(x) == 0) return(NA)
length(grep("^[[:blank:]]*dear +(sir|madam)\\>",
tolower(x))) > 0
},
isWrote =
function(msg)
{
x = msg$body
if(length(x) == 0) return(NA)
length(grep("(wrote|schrieb|ecrit|escribe):", tolower(x) )) > 0
},
avgWordLen =
function(msg)
{
txt = paste(msg$body, collapse = " ")
if(length(txt) == 0 || sum(nchar(txt)) == 0) return(0)
txt = gsub("[^[:alpha:]]", " ", txt)
words = unlist(strsplit(txt, "[[:blank:]]+"))
wordLens = nchar(words)
mean(wordLens[ wordLens > 0 ])
}
,
numDlr =
function(msg)
{
x = paste(msg$body, collapse = "")
if(length(x) == 0 || sum(nchar(x)) == 0)
return(NA)
nchar(gsub("[^$]","", x))
}
)
# spam words
SpamCheckWords = c("viagra", "pounds", "free", "weight", "guarantee", "million", "dollars", "credit", "risk", "prescription", "generic", "drug",
"financial", "save", "dollar", "erotic", "million", "barrister", "beneficiary", "easy", "money back", "money", "credit card")
getMessageRecipients = function(header) {
c(if("To" %in% names(header))  header[["To"]] else character(0),
if("Cc" %in% names(header))  header[["Cc"]] else character(0),
if("Bcc" %in% names(header)) header[["Bcc"]] else character(0)
)
}
# add in additional derived variables
emailDF = createDerivedDF(emailStruct)
### exploring email feature set ###
# boxplot for percent of body that is capitalized
# shows that about 75% of the not spam emails have values below the lower quartile for spam
# this variable may be useful for classification
percent = emailDF$perCaps
isSpamLabs = factor(emailDF$isSpam, labels = c("not spam", "spam"))
#boxplot(log(1 + percent) ~ isSpamLabs, ylab = "Percent Capitals (log)")
# QQ plot for percent of body that is capitalized
# spam/not spam distributions have roughly the same shape
# spam messages have a larger average number of capital letters and a greater spread than non-spam messages
logPerCapsSpam = log(1 + emailDF$perCaps[ emailDF$isSpam ])
logPerCapsHam = log(1 + emailDF$perCaps[ !emailDF$isSpam ])
#qqplot(logPerCapsSpam, logPerCapsHam, xlab = "Regular Email", ylab = "Spam Email", main = "Percentage of Capital Letters (log scale)", pch = 19, cex = 0.3)
# compare the joint distribution of the percentage of capital letters in the email and the total number of characters in the body
# spam is purple, not spam is green
# spam tends to be longer and have more capitalization that not spam
colI = c("#4DAF4A80", "#984EA380")
logBodyCharCt = log(1 + emailDF$bodyCharCt)
logPerCaps = log(1 + emailDF$perCaps)
#plot(logPerCaps ~ logBodyCharCt, xlab = "Total Characters (log)",ylab = "Percent Capitals (log)", col = colI[1 + emailDF$isSpam],xlim = c(2,12), pch = 19, cex = 0.5)
# there is little difference between spam/not spam when looking at the counts of email attachments (most emails have no attachments)
table(emailDF$numAtt, isSpamLabs)
### recursive partitioning ###
library(rpart)
# variables must all be either factors or numeric
# need to convert logicals to factors
setupRpart = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars], function(x) {
x = as.factor(x)
levels(x) = c("F", "T")
x
})
cbind(facVars, data[ , - logicalVars])
}
emailDFrp = setupRpart(emailDF)
################
# pick up here #
################
library(caret)
# Ok so first of all our data is in T/F 'factors'.
# We need to change it to numbers.  And as it turns out, there are quite a few NANs as well.  Let's set those to zero.
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars], function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
emailDFnum = setupRnum(emailDF)
emailDFnum[is.na(emailDFnum)]<-0
library(MLmetrics)
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
library(naivebayes)
library(e1071)
library(rpart)
### rpart ###
results_combined <- data.frame(minsplit=double(),
maxdepth=double(),
cp=double(),
F1=double(),
prec=double(),
rec=double(),
Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(maxdepth=1
),
tuneGrid = cart_grid, na.action = na.omit)
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(maxdepth=1
),
tuneGrid = cart_grid, na.action = na.omit)
cart_grid<-expand.grid(cp = seq(from = 0, to=0.01, by=0.0005))
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(maxdepth=1
),
tuneGrid = cart_grid, na.action = na.omit)
fancyRpartPlot(model_rpart)
library(rattle)
fancyRpartPlot(model_rpart)
fancyRpartPlot(model_rpart$finalModel)
colnames(emailDFnum)
head(emailDFnum)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(maxdepth=2
),
tuneGrid = cart_grid, na.action = na.omit)
fancyRpartPlot(model_rpart$finalModel)
set.seed(123)
model_rpart_example<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(maxdepth=2
),
tuneGrid = cart_grid, na.action = na.omit)
fancyRpartPlot(model_rpart_example$finalModel)
model_rpart_example
control_grid
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
control_grid
i=nrow(control_grid)
i
control_grid$minsplit[i]
control_grid$maxdepth[i]
?expand.grid
?rpart.control
odel_rpart_example<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, method='rpart', na.action = na.omit)
odel_rpart_example
caret::getModelInfo('rpart')
modelLookup("rpart")
odel_rpart_example
odel_rpart_example<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, method='rpart',
control=rpart.control(cp=.01
), na.action = na.omit)
odel_rpart_example
?expand.grid
### rpart ###
results_combined <- data.frame(minsplit=double(),
maxdepth=double(),
cp=double(),
F1=double(),
prec=double(),
rec=double(),
Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
cart_grid<-expand.grid(cp = seq(from = 0, to=0.01, by=0.0005))
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
}
#model_rpart
library(plotly)
str(results_combined)
df.list <- list(cp = results_combined$cp,
maxdepth = results_combined$maxdepth,
minsplit = results_combined$minsplit,
F1 = results_combined$F1)
plot_data <- results_combined %>% select(cp, minsplit, F1) %>% as.matrix
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d', opacity = 0.7)
fig
?layout
m = results_combined[which.max(results_combined$F1),]
m
a <- list(
x = m$cp,
y = m$minsplit,
z = m$F1,
text = rownames(m),
xref = "x",
yref = "y",
zref = "z",
showarrow = TRUE,
arrowhead = 7
# ax = 20,
# ay = -40
)
library(dplyr)
fig <- fig %>% add_markers()
fig <- fig %>% layout(annotations = a)
fig
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d', opacity = 0.7)
m = results_combined[which.max(results_combined$F1),]
a <- list(
x = m$cp,
y = m$minsplit,
z = m$F1,
text = "minsplit=5, maxdepth=29, F1=0.97",
xref = "x",
yref = "y",
zref = "z",
showarrow = TRUE,
arrowhead = 7
# ax = 20,
# ay = -40
)
# fig <- fig %>% add_markers()
fig <- fig %>% layout(annotations = a)
fig
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d', opacity = 0.7)
# fig <- fig %>% add_markers()
fig <- fig %>% layout(xaxis = "cp", yaxis="minsplit", zaxis="F1")
fig <- fig %>% layout(annotations = a)
fig
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d', opacity = 0.7)
m = results_combined[which.max(results_combined$F1),]
a <- list(
x = m$cp,
y = m$minsplit,
z = m$F1,
text = "minsplit=5, maxdepth=29, F1=0.97",
xref = "x",
yref = "y",
zref = "z",
showarrow = TRUE,
arrowhead = 7
# ax = 20,
# ay = -40
)
# fig <- fig %>% add_markers()
fig <- fig %>% layout(xaxis = "cp", yaxis="minsplit", zaxis="F1")
fig
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d', opacity = 0.7)
m = results_combined[which.max(results_combined$F1),]
a <- list(
x = m$cp,
y = m$minsplit,
z = m$F1,
text = "minsplit=5, maxdepth=29, F1=0.97",
xref = "x",
yref = "y",
zref = "z",
showarrow = TRUE,
arrowhead = 7
# ax = 20,
# ay = -40
)
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "cp",
titlefont = f
)
y <- list(
title = "minsplit",
titlefont = f
)
z <- list(
title = "F1",
titlefont = f
)
# fig <- fig %>% add_markers()
fig <- fig %>% layout(xaxis = x, yaxis=y, zaxis=z)
fig <- fig %>% layout(annotations = a)
fig
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d', opacity = 0.7)
m = results_combined[which.max(results_combined$F1),]
a <- list(
x = m$cp,
y = m$minsplit,
z = m$F1,
text = "minsplit=5, maxdepth=29, F1=0.97",
xref = "x",
yref = "y",
zref = "z",
showarrow = TRUE,
arrowhead = 7
# ax = 20,
# ay = -40
)
# fig <- fig %>% add_markers()
fig <- fig %>% layout(annotations = a)
fig
model_rpart$finalModel
str(model_rpart$finalModel)
model_rpart$finalModel$call
model_rpart$finalModel$where
model_rpart$finalModel$terms
model_rpart$finalModel
model_rpart$finalModel$method
model_rpart$finalModel$numresp
model_rpart$finalModel$variable.importance
model_rpart$finalModel$y
model_rpart$finalModel$ordered
model_rpart$finalModel$xNames
model_rpart$finalModel$problemType
?createDataPartition
partition <- createDataPartition(emailDFnum$isSpam, p=.8)
head(partition)
testSpamIdx = sample(numSpam, size = floor(numSpam/3))
testHamIdx = sample(numHam, size = floor(numHam/3))
testDF = rbind( emailDFnum[ emailDFnum$isSpam == "T", ][testSpamIdx, ], emailDFnum[emailDFnum$isSpam == "F", ][testHamIdx, ] )
trainDF = rbind( emailDFnum[emailDFnum$isSpam == "T", ][-testSpamIdx, ], emailDFnum[emailDFnum$isSpam == "F", ][-testHamIdx, ])
dim(trainDF)
dim(testDF)
testSpamIdx = sample(numSpam, size = floor(numSpam/5))
testHamIdx = sample(numHam, size = floor(numHam/5))
testDF = rbind( emailDFnum[ emailDFnum$isSpam == "T", ][testSpamIdx, ], emailDFnum[emailDFnum$isSpam == "F", ][testHamIdx, ] )
trainDF = rbind( emailDFnum[emailDFnum$isSpam == "T", ][-testSpamIdx, ], emailDFnum[emailDFnum$isSpam == "F", ][-testHamIdx, ])
dim(testDF)
dim(trainDF)
reshuffled = shuffle(emailDFnum)
reshuffled = merTools::shuffle(emailDFnum)
install.packages(merTools)
install.packages("merTools")
reshuffled = merTools::shuffle(emailDFnum)
n = length(reshuffled) * 4/5
train = reshuffled[1:n,]
test = reshuffled[(n+1):length(reshuffled),]
reshuffled = sample(emailDFnum)
reshuffled
n = length(reshuffled) * 4/5
train = reshuffled[1:n,]
test = reshuffled[(n+1):length(reshuffled),]
dim(train)
dim(test)
?sample
n
length(reshuffled)
dim(reshuffled)
reshuffled = sample(emailDFnum)
n = dim(reshuffled)[1] * 4/5
train = reshuffled[1:n,]
test = reshuffled[(n+1):length(reshuffled),]
dim(train)
dim(test)
n
n+1
n = floor(dim(reshuffled)[1] * 4/5)
train = reshuffled[1:n,]
test = reshuffled[(n+1):length(reshuffled),]
dim(test)
dim(train)
(n+1)
length(reshuffled)
reshuffled = sample(emailDFnum)
n = floor(dim(reshuffled)[1] * 4/5)
train = reshuffled[1:n,]
test = reshuffled[(n+1):dim(reshuffled)[1],]
dim(train)
dim(test)
new_model_rpart<-caret::train(as.factor(isSpam) ~ .,data=train, trControl = train_control, method='rpart',
control=rpart.control(minsplit=6,
maxdepth=29
),
tuneGrid = cart_grid, na.action = na.omit)
new_model_rpart
?predict
pred = predict(new_model_rpart, newdata = test[ , names(test) != "isSpam"], type = "class")
pred = predict(new_model_rpart, newdata = test[ , names(test) != "isSpam"])
pred
confusionMatrix(pred, test$isSpam)
confusionMatrix(as.factor(pred), test$isSpam)
confusionMatrix(as.factor(pred), as.factor(test$isSpam))
str(pred)
str(test$isSpam)
str(as.factor(test$isSpam))
str(as.factor(emailDFnum$isSpam))
summary(emailDFnum)
str(as.factor(train$isSpam))
str(as.factor(test$isSpam))
str(pred)
summary(pred)
reshuffled = sample(emailDFnum)
n = floor(dim(reshuffled)[1] * 4/5)
train = reshuffled[1:n,]
test = reshuffled[(n+1):dim(reshuffled)[1],]
str(as.factor(train$isSpam))
str(as.factor(test$isSpam))
reshuffle = sample(nrows(emailDFnum))
reshuffle = sample(nrow(emailDFnum))
reshuffled = emailDFnum[reshuffle, ]
n = floor(dim(reshuffled)[1] * 4/5)
train = reshuffled[1:n,]
test = reshuffled[(n+1):dim(reshuffled)[1],]
str(as.factor(train$isSpam))
str(as.factor(test$isSpam))
new_model_rpart<-caret::train(as.factor(isSpam) ~ .,data=train, trControl = train_control, method='rpart',
control=rpart.control(minsplit=6,
maxdepth=29
),
tuneGrid = cart_grid, na.action = na.omit)
new_model_rpart
pred = predict(new_model_rpart, newdata = test[ , names(test) != "isSpam"])
pred
str(pred)
str(as.factor(emailDFnum$isSpam))
confusionMatrix(as.factor(pred), as.factor(test$isSpam))
model_rpart
reshuffle = sample(nrow(emailDFnum))
reshuffled = emailDFnum[reshuffle, ]
n = floor(dim(reshuffled)[1] * 4/5)
train = reshuffled[1:n,]
test = reshuffled[(n+1):dim(reshuffled)[1],]
new_model_rpart<-caret::train(as.factor(isSpam) ~ .,data=train, trControl = train_control, method='rpart',
control=rpart.control(minsplit=6,
maxdepth=29
),
tuneGrid = cart_grid, na.action = na.omit)
new_model_rpart
confusionMatrix(as.factor(pred), as.factor(test$isSpam))
reshuffle = sample(nrow(emailDFnum))
reshuffled = emailDFnum[reshuffle, ]
n = floor(dim(reshuffled)[1] * 4/5)
train = reshuffled[1:n,]
test = reshuffled[(n+1):dim(reshuffled)[1],]
new_model_rpart<-caret::train(as.factor(isSpam) ~ .,data=train, trControl = train_control, method='rpart',
control=rpart.control(minsplit=6,
maxdepth=29
),
tuneGrid = cart_grid, na.action = na.omit)
new_model_rpart
pred = predict(new_model_rpart, newdata = test[ , names(test) != "isSpam"])
confusionMatrix(as.factor(pred), as.factor(test$isSpam))
m = results_combined[which.max(results_combined$F1),]
m
m = results_combined[which.max(results_combined$prec),]
m
