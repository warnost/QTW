train.control <- trainControl(method = "cv", number = 10)
tune.grid <- c(alpha=seq(0,1,0.01), lambda=c(c(1,2,5) %o% 10^(-1:-7)))
tune.grid <- expand.grid(alpha=seq(0,1,0.01), lambda=c(c(1,2,5) %o% 10^(-1:-7)))
fit <- train(total_UPDRS ~ ., data=parkin, tuneGrid = tune.grid, trControl = train.control)
fit <- train(total_UPDRS ~ ., data=parkin, method = "glmnet", tuneGrid = tune.grid, trControl = train.control)
fit
fit <- train(total_UPDRS ~ ., data=select(parkin, -c(motor_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control)
fit
fit <- train(motor_UPDRS~ ., data=select(parkin, -c(total_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control)
fit
?glmnet
fit <- train(motor_UPDRS~ ., data=select(parkin, -c(total_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control, family = "gaussian")
fit <- train(motor_UPDRS~ ., data=select(parkin, -c(total_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control, family = "poisson")
data("iris")
data(iris)
load(iris)
library(rpart)
?rpart
fit1 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.05))
fit1
library(rpart.plot)
rpart.plot(fit1)
?rpart.control
fit2 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.001))
rpart.plot(fit1)
rpart.plot(fit2)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.0001))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.1))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.1, minbucket = 10))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.1, minbucket = 1))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.1, minsplit = 10))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.1, minsplit = 10, xval = 2))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.00001, minsplit = 10, xval = 2))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.00001, minsplit = 10, xval = 10))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.00001, minsplit = 5, xval = 10))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.00001, minsplit = 2, xval = 10))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.00001, minsplit = 1, xval = 10))
rpart.plot(fit3)
fit3 <- rpart(Species ~ ., data = iris,
control = rpart.control(cp = 0.00001, minsplit = 2, xval = 10))
rpart.plot(fit3)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load(file="emailDF.Rda")
library(MLmetrics)
library(caret)
library(rpart)
# Ok so first of all our data is in T/F 'factors'.
# We need to change it to numbers.  And as it turns out, there are quite a few NANs as well.  Let's set those to zero.
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars], function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
emailDFnum = setupRnum(emailDF)
emailDFnum[is.na(emailDFnum)]<-0
library(MLmetrics)
f1 <- function(data, lev = NULL, model = NULL) {
#f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
### rpart ###
results_combined <- data.frame(minsplit=double(),
maxdepth=double(),
cp=double(),
F1=double(),
prec=double(),
rec=double(),
Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
cart_grid<-expand.grid(cp = seq(from = 0, to=0.01, by=0.0005))
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(i)
}
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(i)
}
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
### rpart ###
results_combined <- data.frame(minsplit=double(),
maxdepth=double(),
cp=double(),
F1=double(),
prec=double(),
rec=double(),
Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
cart_grid<-expand.grid(cp = seq(from = 0, to=0.01, by=0.0005))
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(i)
}
warnings()
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
acc <- Accuracy(y_pred = data$pred, y_true = data$obs, positive = lev[1])
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
Accuracy = acc,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
### rpart ###
results_combined <- data.frame(minsplit=double(),
maxdepth=double(),
cp=double(),
F1=double(),
Accuracy=double(),
prec=double(),
rec=double(),
Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
cart_grid<-expand.grid(cp = seq(from = 0, to=0.01, by=0.0005))
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(round(i/nrow(control_grid)))
}
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
acc <- Accuracy(y_pred = data$pred, y_true = data$obs)
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
Accuracy = acc,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
### rpart ###
results_combined <- data.frame(minsplit=double(),
maxdepth=double(),
cp=double(),
F1=double(),
Accuracy=double(),
prec=double(),
rec=double(),
Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
cart_grid<-expand.grid(cp = seq(from = 0, to=0.01, by=0.0005))
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(round(i/nrow(control_grid)))
}
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(round(i/nrow(control_grid),2))
}
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(paste(round(i/nrow(control_grid),2)*100),"% complete")
}
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(paste(round(i/nrow(control_grid),2)*100,"% complete"))
}
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(paste0(round(i/nrow(control_grid),4)*100,"% complete",sep=""))
}
save(results_combined,"gridsearch_result.rda")
save(results_combined,file="gridsearch_result.rda")
load(file="gridsearch_result.rda")
library(plotly)
str(results_combined)
?plot_ly
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z = F1, x=cp, y=maxdepth,data=results_combined)
df.list <- list(cp = results_combined$cp,
maxdepth = results_combined$maxdepth,
minsplit = results_combined$minsplit,
F1 = results_combined$F1)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z = F1, x=cp, y=maxdepth,data=df.list)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(df.list,z = F1, x=cp, y=maxdepth)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(results_combined,z = F1, x=cp, y=maxdepth)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(results_combined, z = results_combined$F1, x=cp, y=maxdepth)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z = results_combined$F1, x=results_combined$cp, y=results_combined$maxdepth)
fig <- fig %>% add_surface()
fig
data("volcano")
plot_data <- results_combined %>% select(xp, minsplit, F1) %>% as.matrix
plot_data <- results_combined %>% select(cp, minsplit, F1) %>% as.matrix
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z = ~plot_data)
fig <- fig %>% add_surface()
fig
summary(plot_data)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(plot_data, z=F1, x=cp, y=minsplit)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(results_combined, z=F1, x=cp, y=minsplit)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(results_combined, z=~F1, x=cp, y=minsplit)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(results_combined, z=~F1, x=~cp, y=~minsplit)
fig <- fig %>% add_surface()
fig
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$F1, x=~cp, y=~minsplit)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit)
fig <- fig %>% add_surface()
fig
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d')
fig
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=~plot_data)
fig <- fig %>% add_surface()
fig
plot_data <- results_combined %>% select(F1, minsplit, cp) %>% as.matrix
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=~plot_data)
fig <- fig %>% add_surface()
fig
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d')
fig <- fig %>% add_surface()
fig
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d')
fig
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d', opacity = 0.7)
fig
fig.update_layout(scene = dict(
xaxis_title='Complexity',
yaxis_title='Min Split',
zaxis_title='F1'),
width=700,
margin=dict(r=20, b=10, l=10, t=10))
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d', opacity = 0.7)
fig.update_layout(scene = dict(
xaxis_title='Complexity',
yaxis_title='Min Split',
zaxis_title='F1'),
width=700,
margin=dict(r=20, b=10, l=10, t=10))
fig %>% layout(xaxis = "Complexity")
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d', opacity = 0.7)
fig %>% layout(xaxis = "Complexity")
fig %>% layout(
xaxis = list(
#type = 'category',
title = 'Complexity'
),
yaxis = list(
title = '# of Items in Stock',
#range = c(0,7)
),
zaxis = list(
title = '# of Items in Stock',
#range = c(0,7)
)
)
fig %>% layout(
xaxis = list(
#type = 'category',
title = 'Complexity'
),
yaxis = list(
title = '# of Items in Stock'
#range = c(0,7)
),
zaxis = list(
title = '# of Items in Stock'
#range = c(0,7)
)
)
fig %>% layout(
xaxis = list(
#type = 'category',
title = 'Complexity'
),
yaxis = list(
title = '# of Items in Stock'
#range = c(0,7)
)
)
fig
fig2 <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$maxdepth, type = 'mesh3d', opacity = 0.7)
fig2
fig3 <- plot_ly(z=results_combined$F1, x=results_combined$minsplit, y=results_combined$maxdepth, type = 'mesh3d', opacity = 0.7)
fig3
