fig <- plot_ly(z=results_combined$F1, x=results_combined$cp, y=results_combined$minsplit, type = 'mesh3d', opacity = 0.7)
fig <- fig %>% layout(
title = "Layout options in a 3d scatter plot",
scene = list(
xaxis = list(title = "Cos"),
yaxis = list(title = "Sin"),
zaxis = list(title = "Z")
))
fig
fig <- fig %>% layout(
title = "Change in F1 score for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1")
))
fig
cart_grid<-expand.grid(cp = seq(from = 0, to=0.01, by=0.0005))
warnings()
library(knitr)
library(rmdformats)
library(formatR)
library(naniar)
library(tidyverse)
library(XML)
library(RColorBrewer)
library(wesanderson)
library(ggplot2)
library(gganimate)
library(gifski)
library(transformr)
library(rcartocolor)
library(tm)
library(rattle)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
load(file="emailDFknit.rda")
### recursive partitioning ###
library(rpart)
library(caret)
# Ok so first of all our data is in T/F 'factors'.
# We need to change it to numbers.  And as it turns out, there are quite a few NANs as well.  Let's set those to zero.
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars], function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
emailDFnum = setupRnum(emailDF)
emailDFnum[is.na(emailDFnum)]<-0
# Because our authors prefer Type I/II errors, but the cool kids know that precision/recall/F1 is where its at, while the default of caret is accuracy and kappa.
# To get us all on the same page, I create a function that returns the metrics we want.
# However, rather than re-invent the wheel, I just install a package.  I am not sure if it had Type I/II errors so those I made my self.
library(MLmetrics)
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
acc <- Accuracy(y_pred = data$pred, y_true = data$obs)
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(prec = p,
F1 = f1_val,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
library(naivebayes)
library(e1071)
library(rpart)
### rpart with defaults ###
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
set.seed(1234)
model_rpart_defaults<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart', na.action = na.omit)
# create the dataset used to loop through different values of minsplit and maxdepth
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
# create the grid used inside caret::train to grid search on cp
cart_grid<-expand.grid(cp = seq(from = 0, to=0.1, by=0.001))
# train function for 5-fold cross validation
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
# loop to tune cp, minsplit and maxdepth
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
#identify which cp parameter for the loop was the best
results=as.data.frame(model_rpart$results)
results$minsplit = control_grid$minsplit[i]
results$maxdepth = control_grid$maxdepth[i]
if (i != 1) { final_result <- rbind(final_result,results) } else {final_result <- results}
#print(paste0(round(i/nrow(control_grid),4)*100,"% complete",sep=""))
}
#save(final_result,file="final_result_knit.rda")
#identify the winning model's parameters
results_tuned = final_result[which(final_result$prec==max(final_result$prec)),]
#rerun the model with the winning parameters to enable tree plotting
set.seed(1234)
model_rpart_tuned<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=results_tuned$minsplit,
maxdepth=results_tuned$maxdepth
),
tuneGrid = cart_grid,na.action = na.omit)
save(final_result,file="final_result_knit.rda")
#identify the winning model's parameters
#load(file="gridsearch_result2.rda")
load(file="final_result_knit.rda")
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=final_result$F1, x=final_result$cp, y=final_result$minsplit, type = 'mesh3d', opacity = 0.7)
fig <- fig %>% layout(
title = "Change in F1 score for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1")
))
fig
fig2 <- plot_ly(z=plot_data$F1, x=plot_data$cp, y=plot_data$maxdepth, type = 'mesh3d', opacity = 0.7)
fig2
plot_data <- final_result
fig2 <- plot_ly(z=plot_data$F1, x=plot_data$cp, y=plot_data$maxdepth, type = 'mesh3d', opacity = 0.7)
fig2
fig3 <- plot_ly(z=plot_data$F1, x=plot_data$minsplit, y=plot_data$maxdepth, type = 'mesh3d', opacity = 0.7)
fig3
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$minsplit, type = 'mesh3d', opacity = 0.7)
fig <- fig %>% layout(
title = "Change in F1 score for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1")
))
fig
fig2 <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$maxdepth, type = 'mesh3d', opacity = 0.7)
fig2 <- fig2 %>% layout(
title = "Change in F1 score for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "depth"),
zaxis = list(title = "prec")
))
fig2
fig3 <- plot_ly(z=plot_data$prec, x=plot_data$minsplit, y=plot_data$maxdepth, type = 'mesh3d', opacity = 0.7)
fig3 <- fig3 %>% layout(
title = "Change in F1 score for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "split"),
yaxis = list(title = "depth"),
zaxis = list(title = "prec")
))
fig3
pandoc_version()
pandoc_available(version = NULL, error = FALSE)
library(pandoc)
library(rmarkdown)
pandoc_version()
pandoc_available(version = NULL, error = FALSE)
plot_data <- final_result
library(knitr)
library(rmdformats)
library(formatR)
library(naniar)
library(tidyverse)
library(XML)
library(RColorBrewer)
library(wesanderson)
library(ggplot2)
library(gganimate)
library(gifski)
library(transformr)
library(rcartocolor)
library(tm)
library(rattle)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
load(file="emailDFknit.rda")
### recursive partitioning ###
library(rpart)
library(caret)
# Ok so first of all our data is in T/F 'factors'.
# We need to change it to numbers.  And as it turns out, there are quite a few NANs as well.  Let's set those to zero.
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars], function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
emailDFnum = setupRnum(emailDF)
emailDFnum[is.na(emailDFnum)]<-0
#save(emailDFnum,file="emailDFnum.rda")
# Because our authors prefer Type I/II errors, but the cool kids know that precision/recall/F1 is where its at, while the default of caret is accuracy and kappa.
# To get us all on the same page, I create a function that returns the metrics we want.
# However, rather than re-invent the wheel, I just install a package.  I am not sure if it had Type I/II errors so those I made my self.
library(MLmetrics)
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
acc <- Accuracy(y_pred = data$pred, y_true = data$obs)
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(prec = p,
F1 = f1_val,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
library(naivebayes)
library(e1071)
library(rpart)
### rpart with defaults ###
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
set.seed(1234)
model_rpart_defaults<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart', na.action = na.omit)
# create the dataset used to loop through different values of minsplit and maxdepth
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
# create the grid used inside caret::train to grid search on cp
cart_grid<-expand.grid(cp = seq(from = 0, to=0.1, by=0.001))
# train function for 5-fold cross validation
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
load(file="emailDFnum.rda")
load(file="final_result_knit.rda")
results_tuned = final_result[which(final_result$prec==max(final_result$prec)),]
#rerun the model with the winning parameters to enable tree plotting
set.seed(1234)
model_rpart_tuned<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=results_tuned$minsplit,
maxdepth=results_tuned$maxdepth
),
tuneGrid = cart_grid,na.action = na.omit)
# This is a basic example of a CART with maxdepth=2
set.seed(123)
model_rpart_example<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(maxdepth=2),
tuneGrid = cart_grid, na.action = na.omit)
# Let us visualize the tree
fancyRpartPlot(model_rpart_example$finalModel,sub="", main="Figure 1: CART Tree with maxdepth=2")
plot_data <- final_result
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$minsplit, type = 'mesh3d', opacity = 0.7)
fig <- fig %>% layout(
title = "Figure 1: Change in Precision for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1")
))
fig
fig2 <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$maxdepth, type = 'mesh3d', opacity = 0.7)
fig2 <- fig2 %>% layout(
title = "Change in F1 score for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "depth"),
zaxis = list(title = "prec")
))
fig2
fig3 <- plot_ly(z=plot_data$prec, x=plot_data$minsplit, y=plot_data$maxdepth, type = 'mesh3d', opacity = 0.7)
fig3 <- fig3 %>% layout(
title = "Change in F1 score for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "split"),
yaxis = list(title = "depth"),
zaxis = list(title = "prec")
))
fig3
final_result[which(final_result$prec == max(final_result$prec) )]
final_result[which(final_result$prec == max(final_result$prec) ),]
head(final_result%>% arrange(prec))
View(final_result)
library(knitr)
library(rmdformats)
library(formatR)
library(naniar)
library(tidyverse)
library(XML)
library(RColorBrewer)
library(wesanderson)
library(ggplot2)
library(plotly)
library(gganimate)
library(gifski)
library(transformr)
library(rcartocolor)
library(tm)
library(rattle)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
load(file="emailDFknit.rda")
### recursive partitioning ###
library(rpart)
library(caret)
# Ok so first of all our data is in T/F 'factors'.
# We need to change it to numbers.  And as it turns out, there are quite a few NANs as well.  Let's set those to zero.
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars], function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
emailDFnum = setupRnum(emailDF)
emailDFnum[is.na(emailDFnum)]<-0
#save(emailDFnum,file="emailDFnum.rda")
# Because our authors prefer Type I/II errors, but the cool kids know that precision/recall/F1 is where its at, while the default of caret is accuracy and kappa.
# To get us all on the same page, I create a function that returns the metrics we want.
# However, rather than re-invent the wheel, I just install a package.  I am not sure if it had Type I/II errors so those I made my self.
library(MLmetrics)
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
acc <- Accuracy(y_pred = data$pred, y_true = data$obs)
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(prec = p,
F1 = f1_val,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
library(naivebayes)
library(e1071)
library(rpart)
### rpart with defaults ###
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
set.seed(1234)
model_rpart_defaults<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart', na.action = na.omit)
# create the dataset used to loop through different values of minsplit and maxdepth
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
# create the grid used inside caret::train to grid search on cp
cart_grid<-expand.grid(cp = seq(from = 0, to=0.1, by=0.001))
# train function for 5-fold cross validation
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
load(file="emailDFnum.rda")
load(file="final_result_knit.rda")
results_tuned = final_result[which(final_result$prec==max(final_result$prec)),]
#rerun the model with the winning parameters to enable tree plotting
set.seed(1234)
model_rpart_tuned<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=results_tuned$minsplit,
maxdepth=results_tuned$maxdepth
),
tuneGrid = cart_grid,na.action = na.omit)
# This is a basic example of a CART with maxdepth=2
set.seed(123)
model_rpart_example<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(maxdepth=2),
tuneGrid = cart_grid, na.action = na.omit)
# Let us visualize the tree
fancyRpartPlot(model_rpart_example$finalModel,sub="", main="Figure 1: CART Tree with maxdepth=2")
plot_data <- final_result
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$minsplit, type = 'mesh3d', opacity = 0.7)
fig <- fig %>% layout(
title = "Figure 1: Change in Precision for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1")
))
fig
fig2 <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$maxdepth, type = 'mesh3d', opacity = 0.7)
fig2 <- fig2 %>% layout(
title = "Figure 2: Change in Precision for different values of CP and Max Depth",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "depth"),
zaxis = list(title = "prec")
))
fig2
fig3 <- plot_ly(z=plot_data$prec, x=plot_data$minsplit, y=plot_data$maxdepth, type = 'mesh3d', opacity = 0.7)
fig3 <- fig3 %>% layout(
title = "Figure3 Change in Precision for different values of Minsplit and Maxdepth",
scene = list(
xaxis = list(title = "split"),
yaxis = list(title = "depth"),
zaxis = list(title = "prec")
))
fig3
# tree with defaults
par(mar=c(5,4,10,2))
fancyRpartPlot(model_rpart_defaults$finalModel, sub="", main="Figure 2. CART Tree with Default Paramter Values")
View(plot_data)
test <- plot_data %>% group_by(cp, minsplit) %>% summarise_all(mean)
101*21
plot_data <- final_result %>% group_by(cp, minsplit) %>% summarise_all(mean) %>% select(prec, cp, minsplit)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$minsplit, type = 'mesh3d', opacity = 0.7)
fig <- fig %>% layout(
title = "Figure 1: Change in Precision for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1"),
intensity = c(0, 0.33, 0.66, 1),
color = c(0, 0.33, 0.66, 1),
colors = colorRamp(c("red", "green", "blue"))
))
fig
plot_data <- final_result %>% group_by(cp, minsplit) %>% summarise_all(mean) %>% select(prec, cp, minsplit)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$minsplit, type = 'mesh3d', opacity = 0.7,
intensity = c(0, 0.33, 0.66, 1),
color = c(0, 0.33, 0.66, 1),
colors = colorRamp(c("red", "green", "blue"))
)
fig <- fig %>% layout(
title = "Figure 1: Change in Precision for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1")
))
fig
plot_data <- final_result %>% group_by(cp, minsplit) %>% summarise_all(mean) %>% select(prec, cp, minsplit)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$minsplit, type = 'mesh3d', opacity = 0.7,
intensity = c(min(plot_data$prec),mean(plot_data$prec),max(plot_data$prec)),
color = c(min(plot_data$prec),mean(plot_data$prec),max(plot_data$prec)),
colors = colorRamp(c("red", "green", "blue"))
)
fig <- fig %>% layout(
title = "Figure 1: Change in Precision for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1")
))
fig
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$minsplit, type = 'mesh3d', opacity = 0.7,
intensity = c(min(plot_data$prec),0.75*mean(plot_data$prec),1.25*mean(plot_data$prec),max(plot_data$prec)),
color = c(min(plot_data$prec),0.75*mean(plot_data$prec),1.25*mean(plot_data$prec),max(plot_data$prec)),
colors = colorRamp(c("red", "green", "blue"))
)
plot_data <- final_result %>% group_by(cp, minsplit) %>% summarise_all(mean) %>% select(prec, cp, minsplit)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$minsplit, type = 'mesh3d', opacity = 0.7,
intensity = c(min(plot_data$prec),0.75*mean(plot_data$prec),1.25*mean(plot_data$prec),max(plot_data$prec)),
color = c(min(plot_data$prec),0.75*mean(plot_data$prec),1.25*mean(plot_data$prec),max(plot_data$prec)),
colors = colorRamp(c("red", "green", "blue"))
)
fig <- fig %>% layout(
title = "Figure 1: Change in Precision for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1")
))
fig
plot_data <- final_result %>% group_by(cp, minsplit) %>% summarise_all(mean) %>% select(prec, cp, minsplit)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$minsplit, type = 'mesh3d', opacity = 0.7,
intensity = c(min(plot_data$prec),0.9*mean(plot_data$prec),1.1*mean(plot_data$prec),max(plot_data$prec)),
color = c(min(plot_data$prec),0.75*mean(plot_data$prec),1.25*mean(plot_data$prec),max(plot_data$prec)),
colors = colorRamp(c("red", "green", "blue"))
)
fig <- fig %>% layout(
title = "Figure 1: Change in Precision for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1")
))
fig
plot_data <- final_result %>% group_by(cp, minsplit) %>% summarise_all(mean) %>% select(prec, cp, minsplit)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z=plot_data$prec, x=plot_data$cp, y=plot_data$minsplit, type = 'mesh3d', opacity = 0.7,  intensity = seq(min(plot_data$prec), max(plot_data$prec), length = 8),
color = seq(min(plot_data$prec), max(plot_data$prec), length = 8),
colors = colorRamp(rainbow(8))
)
fig <- fig %>% layout(
title = "Figure 1: Change in Precision for different values of CP and Minsplit",
scene = list(
xaxis = list(title = "Complexity"),
yaxis = list(title = "Minsplit"),
zaxis = list(title = "F1")
))
fig
