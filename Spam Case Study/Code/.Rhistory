Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
cart_grid<-expand.grid(cp = seq(from = 0, to=0.01, by=0.0005))
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
}
library(foreach)
foreach(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
}
foreach(i in 1:nrow(control_grid)) %do% {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
}
foreach(i = 1:nrow(control_grid)) %do% {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
}
x <- foreach(i = 1:nrow(control_grid)) %dopar% {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(i)
}
result_combined <- foreach(i = 1:nrow(control_grid), .combine = rbind) %dopar% {
set.seed(1234)
result <- data.frame(minsplit=double(),
maxdepth=double(),
cp=double(),
F1=double(),
Accuracy = double(),
prec=double(),
rec=double(),
Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
result[i,"minsplit"] = control_grid$minsplit[i]
result[i,"maxdepth"] = control_grid$maxdepth[i]
result[i,"cp"] = results1$cp
result[i,"F1"] = results1$F1
result[i,"Accuracy"] = results1$Accuracy
result[i,"prec"] = results1$prec
result[i,"rec"] = results1$rec
result[i,"Type_I_err"] = results1$Type_I_err
result[i,"Type_II_err"] = results1$Type_II_err
print(i)
result
}
library(doParallel)
cl <- makeCluster(2)
cl <- makeCluster(8)
registerDoParallel(cl)
result_combined <- foreach(i = 1:nrow(control_grid), .combine = rbind) %dopar% {
set.seed(1234)
result <- data.frame(minsplit=double(),
maxdepth=double(),
cp=double(),
F1=double(),
Accuracy = double(),
prec=double(),
rec=double(),
Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
result[i,"minsplit"] = control_grid$minsplit[i]
result[i,"maxdepth"] = control_grid$maxdepth[i]
result[i,"cp"] = results1$cp
result[i,"F1"] = results1$F1
result[i,"Accuracy"] = results1$Accuracy
result[i,"prec"] = results1$prec
result[i,"rec"] = results1$rec
result[i,"Type_I_err"] = results1$Type_I_err
result[i,"Type_II_err"] = results1$Type_II_err
print(i)
result
}
getDoParWorkers()
registerDoParallel(cl,cores=8)
getDoParWorkers()
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
}
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(i)
}
library(MLmetrics)
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
acc <- Accuracy(data$pred,data$obs)
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
Accuracy = acc,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load(file="emailDF.Rda")
library(MLmetrics)
library(caret)
library(rpart)
# Ok so first of all our data is in T/F 'factors'.
# We need to change it to numbers.  And as it turns out, there are quite a few NANs as well.  Let's set those to zero.
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars], function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
emailDFnum = setupRnum(emailDF)
emailDFnum[is.na(emailDFnum)]<-0
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
acc <- Accuracy(data$pred,data$obs)
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
Accuracy = acc,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
### rpart ###
results_combined <- data.frame(minsplit=double(),
maxdepth=double(),
cp=double(),
F1=double(),
Accuracy = double(),
prec=double(),
rec=double(),
Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
cart_grid<-expand.grid(cp = seq(from = 0, to=0.01, by=0.0005))
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(i)
}
library(naivebayes)
library(e1071)
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
acc <- Accuracy(data$pred,data$obs)
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
Accuracy = acc,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(i)
}
f1_val <- MLmetrics::F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
library(MLmetrics)
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- MLmetrics::F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
acc <- Accuracy(data$pred,data$obs)
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
Accuracy = acc,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(i)
}
f1 <- function(data, lev = NULL, model = NULL) {
acc <- Accuracy(data$pred,data$obs)
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
f1_val <- (2 * p * r) / (p + r)
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
Accuracy = acc,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"Accuracy"] = results1$Accuracy
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(i)
}
library(MLmetrics)
library(caret)
library(rpart)
library(naivebayes)
library(e1071)
# Ok so first of all our data is in T/F 'factors'.
# We need to change it to numbers.  And as it turns out, there are quite a few NANs as well.  Let's set those to zero.
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars], function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
load(file="emailDF.Rda")
library(MLmetrics)
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
library(naivebayes)
library(e1071)
library(rpart)
### rpart ###
results_combined <- data.frame(minsplit=double(),
maxdepth=double(),
cp=double(),
F1=double(),
prec=double(),
rec=double(),
Type_I_err=double(),
Type_II_err=double(),
stringsAsFactors = FALSE)
control_grid <- expand.grid(minsplit=seq(5,25,1),
maxdepth=seq(15,30,1))
cart_grid<-expand.grid(cp = seq(from = 0, to=0.01, by=0.0005))
train_control<-trainControl(method="cv", number =5, savePredictions = 'final',summaryFunction = f1)
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
}
emailDFnum = setupRnum(emailDF)
emailDFnum[is.na(emailDFnum)]<-0
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
}
f1 <- function(data, lev = NULL, model = NULL) {
#f1_val <- F1_Score(y_pred = data$pred, y_true = data$obs, positive = lev[1])
p <- Precision(y_pred = data$pred, y_true = data$obs, positive = lev[1])
r <- Recall(y_pred = data$pred, y_true = data$obs, positive = lev[1])
fp <-sum(data$pred==0 & data$obs==1)/length(data$pred)
fn <-sum(data$pred==1 & data$obs==0)/length(data$pred)
c(F1 = f1_val,
prec = p,
rec = r,
Type_I_err=fp,
Type_II_err=fn)
}
print(i)
for(i in 1:nrow(control_grid)) {
set.seed(1234)
model_rpart<-caret::train(as.factor(isSpam) ~ .,data=emailDFnum, trControl = train_control, method='rpart',
control=rpart.control(minsplit=control_grid$minsplit[i],
maxdepth=control_grid$maxdepth[i]
),
tuneGrid = cart_grid, na.action = na.omit)
results=as.data.frame(model_rpart$results)
results1=results[which(results$F1==max(results$F1)),]
results_combined[i,"minsplit"] = control_grid$minsplit[i]
results_combined[i,"maxdepth"] = control_grid$maxdepth[i]
results_combined[i,"cp"] = results1$cp
results_combined[i,"F1"] = results1$F1
results_combined[i,"prec"] = results1$prec
results_combined[i,"rec"] = results1$rec
results_combined[i,"Type_I_err"] = results1$Type_I_err
results_combined[i,"Type_II_err"] = results1$Type_II_err
print(i)
}
