?plsr
library(knitr)
library(rmdformats)
library(formatR)
library(tidyverse)
library(magrittr)
library(caret)
library(pls)
?plsr
library(knitr)
library(rmdformats)
library(formatR)
library(tidyverse)
library(magrittr)
library(caret)
library(pls)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
processLine = function(x){
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
tmp = matrix(tokens[ - (1:10) ], ncol= 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6,
byrow = TRUE), tmp)
}
roundOrientation = function(angles) {
refs = seq(0, by = 45, length  = 9)
q = sapply(angles, function(o) which.min(abs(o - refs)))
c(refs[1:8], 0)[q]
}
readData = function(filename = '../Data/offline.final.trace.txt',
subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81"))  {
txt = readLines(filename)
lines = txt[ substr(txt, 1, 1) != "#" ]
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors= FALSE)
names(offline) = c("time", "scanMac",
"posX", "posY", "posZ", "orientation",
"mac", "signal", "channel", "type")
# keep only signals from access points
offline = offline[ offline$type == "3", ]
# drop scanMac, posZ, channel, and type - no info in them
dropVars = c("scanMac", "posZ", "channel", "type")
offline = offline[ , !( names(offline) %in% dropVars ) ]
# drop more unwanted access points
offline = offline[ offline$mac %in% subMacs, ]
# convert numeric values
numVars = c("time", "posX", "posY", "orientation", "signal")
offline[ numVars ] = lapply(offline[ numVars ], as.numeric)
# convert time to POSIX
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
# round orientations to nearest 45
offline$angle = roundOrientation(offline$orientation)
return(offline)
}
offline = readData(filename = '../Data/offline.final.trace.txt')
subMacs = names(sort(table(offline$mac), decreasing = TRUE))
online = readData(filename = '../Data/online.final.trace.txt')
online$posXY_round = paste(round(online$posX,digits=0), round(online$posY,digits=0), sep = "-")
online$posXY_round <- as.factor(online$posXY_round)
# this is the first non-comment line in the text file
txt = readLines('../Data/offline.final.trace.txt')
txt[4]
# investigating frequency of measurements by mac address
vals = data.frame(table(mac=offline['mac']))
vals[order(-vals$Freq),]
# format signal stength as an integer
offline$signal %<>% as.integer
online$signal %<>% as.integer
# remove channel and scanMac as they have no bearing on the analysis
# transpose long to wide so each of the 7 macs has a column
offline_pivot<-offline %>% pivot_wider(names_from = mac,values_from = signal, values_fn = list(signal=mean))
online_pivot<- online %>% pivot_wider(names_from = mac,values_from = signal, values_fn = list(signal=mean))
# check for nas
offline_pivot$nas<-rowSums(is.na(offline_pivot))
# remove nas
offline_pivot = offline_pivot[offline_pivot$nas==0,]
# create categorical variable representing the x-y position
offline_pivot$posXY = paste(offline_pivot$posX, offline_pivot$posY, sep = "-")
online_pivot$posXY = paste(online_pivot$posX, online_pivot$posY, sep = "-")
offline_pivot_x_y = offline_pivot
offline_pivot = select(offline_pivot,-c(posX, posY, time, orientation))
offline_pivot_x_y = select(offline_pivot_x_y,-c(posXY, time, orientation))
head(offline_pivot)
vals = data.frame(table(online['mac']))
vals[order(-vals$Freq),]
online_pivot_x_y = online_pivot
online_pivot = select(online_pivot,-c(posX, posY,time,orientation))
online_pivot_x_y = select(online_pivot_x_y,-c(posXY, time,orientation))
head(online_pivot)
library(knitr)
library(rmdformats)
library(formatR)
library(tidyverse)
library(magrittr)
library(caret)
library(pls)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# this is the first non-comment line in the text file
txt = readLines('../Data/offline.final.trace.txt')
txt[4]
processLine = function(x){
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
# keep the last 4 columns related to measurements
tmp = matrix(tokens[ - (1:10) ], ncol= 4, byrow = TRUE)
# don't include columns 1, 3, 4, 9 because these are variable names
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6, byrow = TRUE), tmp)
}
roundOrientation = function(angles) {
refs = seq(0, by = 45, length  = 9)
q = sapply(angles, function(o) which.min(abs(o - refs)))
c(refs[1:8], 0)[q]
}
readData = function(filename = '../Data/offline.final.trace.txt',
subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81"))  {
txt = readLines(filename)
#remove comments
lines = txt[ substr(txt, 1, 1) != "#" ]
#apply function to read and parse data
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors= FALSE)
names(offline) = c("time", "scanMac",
"posX", "posY", "posZ", "orientation",
"mac", "signal", "channel", "type")
# keep only signals from access points
offline = offline[ offline$type == "3", ]
# drop scanMac, posZ, channel, and type - no info in them
dropVars = c("scanMac", "posZ", "channel", "type")
offline = offline[ , !( names(offline) %in% dropVars ) ]
# drop more unwanted access points
offline = offline[ offline$mac %in% subMacs, ]
# convert numeric values
numVars = c("time", "posX", "posY", "orientation", "signal")
offline[ numVars ] = lapply(offline[ numVars ], as.numeric)
# convert time to POSIX
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
# round orientations to nearest 45
offline$angle = roundOrientation(offline$orientation)
return(offline)
}
offline = readData(filename = '../Data/offline.final.trace.txt')
subMacs = names(sort(table(offline$mac), decreasing = TRUE))
online = readData(filename = '../Data/online.final.trace.txt')
# investigating frequency of measurements by mac address
vals = data.frame(table(mac=offline['mac']))
#vals[order(-vals$Freq),] #used table 2 instead
# format signal stength as an integer
offline$signal %<>% as.integer
online$signal %<>% as.integer
# remove channel and scanMac as they have no bearing on the analysis
# transpose long to wide so each of the 7 macs has a column
offline_pivot<-offline %>% pivot_wider(names_from = mac,values_from = signal, values_fn = list(signal=mean))
online_pivot<- online %>% pivot_wider(names_from = mac,values_from = signal, values_fn = list(signal=mean))
# impute NA
offline_pivot[is.na(offline_pivot)] <- -100
online_pivot[is.na(online_pivot)] <- -100
# create categorical variable representing the x-y position
offline_pivot$posXY = paste(offline_pivot$posX, offline_pivot$posY, sep = "-")
online_pivot$posXY = paste(online_pivot$posX, online_pivot$posY, sep = "-")
online_pivot$posXY_round = paste(round(online_pivot$posX,digits=0), round(online_pivot$posY,digits=0), sep = "-")
# create 2 datasets for the 2 different models, offline_pivot has posXY and offline_pivot_x_y has both posX and posY
offline_pivot_x_y = offline_pivot
# remove variables that are not needed for modeling
offline_pivot = select(offline_pivot,-c(time, posX, posY, orientation, rawTime))
offline_pivot_x_y = select(offline_pivot_x_y,-c(time, orientation, rawTime, posXY))
# create 2 datasets for the 2 different models, offline_pivot has posXY and offline_pivot_x_y has both posX and posY
online_pivot_x_y = online_pivot
# remove variables that are not needed for modeling
online_pivot = select(online_pivot,-c(time, posX, posY, orientation, rawTime, posXY))
online_pivot = online_pivot %>% rename(posXY = posXY_round)
online_pivot_x_y = select(online_pivot_x_y,-c(time, orientation, rawTime, posXY_round))
set.seed(123)
trControl <- trainControl(method  = "cv", number  = 5)
fit <- train(posXY ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = seq(3,11,2)),
trControl  = trControl,
data       = offline_pivot,
preProcess = c("center","scale")
)
fit
predict = predict(fit, newdata=online_pivot, type="raw")
confusionMatrix(predict,as.factor(online_pivot$posXY))
predict
online_pivot$posXY
as.factor(online_pivot$posXY)
lapply(predict, as.character)
mapply(predict, as.character)
apply(predict, as.character)
new_predict[] <- lapply(predict, as.character)
predict_new <- data.frame(lapply(predict, as.character), stringsAsFactors=FALSE)
predict_new
head(predict_new)
predict
str(predict)
as.character(predict)
str(online_pivot$posXY)
confusionMatrix(as.character(predict),online_pivot$posXY)
predict
as.factor(online_pivot$posXY)
as.factor(offline_pivot$posXY)
sum(predict == online_pivot$posXY)
nrow(predict)
nrow(online_pivot$posXY)
dim(online_pivot)
dim(predict)
length(predict)
sum(predict == online_pivot$posXY) / length(predict)
predict
str(predict)
str(online_pivot$posXY)
str(as.character(predict))
sum(as.character(predict) == online_pivot$posXY) / length(predict)
test <- as.data.frame(predicted=as.character(predict),actual=online_pivot$posXY)
test$correct <- test[,1] == test[,2]
sum(test$correct)/length(test$correct)
test <- data.frame(predicted=as.character(predict),actual=online_pivot$posXY)
test$correct <- test[,1] == test[,2]
sum(test$correct)/length(test$correct)
?complete.cases
