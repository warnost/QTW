install.packages("COVID19")
library(COVID19)
install.packages("tidyr")
library(COVID19)
update.packages(checkBuilt=TRUE, ask=FALSE)
update.packages(checkBuilt=TRUE, ask=FALSE)
pkgs <- fs::path_file(fs::dir_ls("~/Library/R/4.0/library"))
pkgs <- fs::path_file(fs::dir_ls("C:\Users\William\Documents\R\win-library\4.0"))
pkgs <- fs::path_file(fs::dir_ls("C:\\Users\\William\\Documents\\R\\win-library\\4.0"))
library(COVID19)
update.packages(checkBuilt=TRUE, ask=FALSE)
library(COVID19)
install.packages("rlang")
library(COVID19)
wb <- c("gdp" = "NY.GDP.MKTP.CD", "hosp_beds" = "SH.MED.BEDS.ZS")
gmr <- "https://www.gstatic.com/covid19/mobility/Global_Mobility_Report.csv"
amr <- "https://covid19-static.cdn-apple.com/covid19-mobility-data/"
amr <- paste0(amr, "2012HotfixDev8/v3/en-us/applemobilitytrends-2020-07-09.csv")
st.main.raw <- covid19("US",level=2, wb=wb, gmr=gmr,amr=amr)
nat.main.raw <- covid19("US",level=1, wb=wb, gmr=gmr,amr=amr)
library(readr)
us <- read_csv("C:/Users/William/OneDrive/Time Series/covid/covid-19-data-master/us.csv")
View(us)
View(nat.main.raw)
install.packages("tswgewrapped")
devtools::install_github("josephsdavid/tswgewrapped", build_vignettes = TRUE)
devtools::install_github("josephsdavid/tswgewrapped", build_vignettes = TRUE)
install.packages("backports")
install.packages("backports")
install.packages("backports")
devtools::install_github("josephsdavid/tswgewrapped", build_vignettes = TRUE)
devtools::install_github("josephsdavid/tswgewrapped", build_vignettes = FALSE)
library(tswge)
factor.wge(c(0.8,-0.99))
factor.wge(c(1.2))
factor.wge(c(0.9,-1.4))
factor.wge(c(1.2,-0.9))
library(readr)
FinalExamData1 <- read_csv("C:/Users/William/OneDrive/Time Series/Time Series Exam Summer 2020/FinalExamData1.csv")
View(FinalExamData1)
install.packages("fUnitRoots")
library(fUnitRoots)
adfTest(FinalExamData1$x)
x1 <- artrans.wge(FinalExamData1$x,1)
ljung.wge(x1)
ljung.wge(x1, K=48)
ljung.wge(x1)
ljung.wge(x1, K=48)
?ljung.wge
aic5.wge(x1, p=0:15,q=0:2)
aic5.wge(x1, p=0:10,q=0:2)
x1.est=est.ar.wge(x1,p=1)
x1.est$avar
fore.x1 <- fore.arma.wge(x1,phi=x1.est$phi,n.ahead=30,lastn=FALSE,limits=FALSE)
fore.x1 <- fore.arma.wge(x1,phi=x1.est$phi,n.ahead=30,lastn=T,limits=FALSE)
499-30+1
ASE = mean((x1[470:499] - fore.x1$f)^2)
ASE
x <- FinalExamData1$x
set.seed(2)
fit.mlp = mlp(ts(x), difforder=1,reps = 50,comb = "mean")
library(nnfor)
fit.mlp = mlp(ts(x), difforder=1,reps = 50,comb = "mean")
fit.mlp = mlp(ts(x[1:450]), difforder=1,reps = 50,comb = "mean")
fit.mlp
fore.mlp = forecast(fit.mlp, h = 30)
plot(fore.mlp)
ASE = mean((x[451:500] - fore.mlp$mean)^2)
fore.mlp = forecast(fit.mlp, h = 50)
plot(fore.mlp)
ASE = mean((x[451:500] - fore.mlp$mean)^2)
ASE
set.seed(2)
x <- FinalExamData1$x
fit.mlp = mlp(ts(x[1:450]),reps = 50,comb = "mean")
fit.mlp
plot(fit.mlp)
fore.mlp = forecast(fit.mlp, h = 50)
plot(fore.mlp)
ASE = mean((x[451:500] - fore.mlp$mean)^2)
ASE
fore.x1 <- fore.aruma.wge(x,phi=x1.est$phi,d=1,n.ahead=30,lastn=T,limits=FALSE)
ASE = mean((x1[470:499] - fore.x1$f)^2)
ASE
fore.x <- fore.aruma.wge(x,phi=x1.est$phi,d=1,n.ahead=30,lastn=T,limits=FALSE)
ASE = mean((x1[470:499] - fore.x1$f)^2)
x <- FinalExamData1$x
fore.x <- fore.aruma.wge(x,phi=x1.est$phi,d=1,n.ahead=30,lastn=T,limits=FALSE)
ASE = mean((x[470:499] - fore.x1$f)^2)
ASE
set.seed(2)
x <- FinalExamData1$x
fit.mlp = mlp(ts(x[1:450]),reps = 50,comb = "mean")
fit.mlp
plot(fit.mlp)
fore.mlp = forecast(fit.mlp, h = 50)
plot(fore.mlp)
ASE = mean((x[451:500] - fore.mlp$mean)^2)
ASE
set.seed(2)
x <- FinalExamData1$x
fit.mlp = mlp(ts(x[1:470]),reps = 50,comb = "mean")
fit.mlp
plot(fit.mlp)
fore.mlp = forecast(fit.mlp, h = 30)
plot(fore.mlp)
ASE = mean((x[471:500] - fore.mlp$mean)^2)
ASE
fore.x <- fore.aruma.wge(x,phi=x1.est$phi,d=1,n.ahead=30,lastn=T,limits=FALSE)
ASE = mean((x[471:500] - fore.x1$f)^2)
ASE
x <- FinalExamData1$x
fore.x <- fore.aruma.wge(x,phi=x1.est$phi,d=1,n.ahead=30,lastn=T,limits=FALSE)
ASE = mean((x[471:500] - fore.x1$f)^2)
ASE
library(readr)
FinalExamData2 <- read_csv("C:/Users/William/OneDrive/Time Series/Time Series Exam Summer 2020/FinalExamData2.csv")
View(FinalExamData2)
set.seed(2)
VARselect(FinalExamData2, type = "both")
library(vars)
set.seed(2)
VARselect(FinalExamData2, type = "both")
?VARselect
VARselect(FinalExamData2, lag.max = 5, type = "both")
set.seed(2)
VARselect(FinalExamData2, lag.max = 5, type = "both")
?VAR
var.mod <- VAR(FinalExamData2, p=2,type = "both")
var.mod
var.mod$varresult$X1
AIC(var.mod)
VARselect(FinalExamData2, lag.max = 5, type = "constant")
VARselect(FinalExamData2, lag.max = 5, type = "const")
var.mod <- VAR(FinalExamData2, p=2,type = "both")
?VARselect
summary(var.mod)
preds=predict(var.mod,n.ahead=5)
preds
preds$fcst$X1
var.mod <- VAR(FinalExamData2, p=2,type = "both")
preds=predict(var.mod,n.ahead=5)
preds$fcst$X1
x5 <- 0.7*5*(1-1) + mean(x) * (1-0.7)
x5
mean(x)
x <- c(3,3,5,5)
x5 <- 0.7*5*(1-1) + mean(x) * (1-0.7)
x5
psi.weights.wge(phi = 0.7)
psi.weights.wge(phi = 0.7, lag.max=5)
x5 + 1.96*2*sqrt(0.7^2)
x5 - 1.96*2*sqrt(0.7^2)
source('C:/Users/William/OneDrive/MSDS_7331_QTW/RTLS Case Study/GeoLoc_code.R', echo=TRUE)
setwd("C:/Users/William/OneDrive/MSDS_7331_QTW/RTLS Case Study")
source('C:/Users/William/OneDrive/MSDS_7331_QTW/RTLS Case Study/GeoLoc_code.R', echo=TRUE)
subMacs
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
processLine = function(x){
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
tmp = matrix(tokens[ - (1:10) ], ncol= 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6,
byrow = TRUE), tmp)
}
roundOrientation = function(angles) {
refs = seq(0, by = 45, length  = 9)
q = sapply(angles, function(o) which.min(abs(o - refs)))
c(refs[1:8], 0)[q]
}
readData = function(filename = 'offline.final.trace.txt',
subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81"))  {
txt = readLines(filename)
lines = txt[ substr(txt, 1, 1) != "#" ]
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors= FALSE)
names(offline) = c("time", "scanMac",
"posX", "posY", "posZ", "orientation",
"mac", "signal", "channel", "type")
# keep only signals from access points
offline = offline[ offline$type == "3", ]
# drop scanMac, posZ, channel, and type - no info in them
dropVars = c("scanMac", "posZ", "channel", "type")
offline = offline[ , !( names(offline) %in% dropVars ) ]
# drop more unwanted access points
offline = offline[ offline$mac %in% subMacs, ]
# convert numeric values
numVars = c("time", "posX", "posY", "orientation", "signal")
offline[ numVars ] = lapply(offline[ numVars ], as.numeric)
# convert time to POSIX
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
# round orientations to nearest 45
offline$angle = roundOrientation(offline$orientation)
return(offline)
}
offline = readData(subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81", "00:0f:a3:39:dd:cd"))
subMacs = names(sort(table(offline$mac), decreasing = TRUE))
str(offline)
subMacs
oldPar = par(mar = c(3.1, 3, 1, 1))
library(lattice)
bwplot(signal ~ factor(angle) | mac, data = offline,
subset = posX == 2 & posY == 12
& mac != "00:0f:a3:39:dd:cd",
layout = c(2,3))
par(oldPar)
oldPar = par(mar = c(3.1, 3, 1, 1))
densityplot( ~ signal | mac + factor(angle), data = offline,
subset = posX == 24 & posY == 4 &
mac != "00:0f:a3:39:dd:cd",
bw = 0.5, plot.points = FALSE)
par(oldPar)
offline$posXY = paste(offline$posX, offline$posY, sep = "-")
byLocAngleAP = with(offline,
by(offline, list(posXY, angle, mac),
function(x) x))
signalSummary =
lapply(byLocAngleAP,
function(oneLoc) {
ans = oneLoc[1, ]
ans$medSignal = median(oneLoc$signal)
ans$avgSignal = mean(oneLoc$signal)
ans$num = length(oneLoc$signal)
ans$sdSignal = sd(oneLoc$signal)
ans$iqrSignal = IQR(oneLoc$signal)
ans
})
offlineSummary = do.call("rbind", signalSummary)
oldPar = par(mar = c(3.1, 3, 1, 1))
breaks = seq(-90, -30, by = 5)
bwplot(sdSignal ~ cut(avgSignal, breaks = breaks),
data = offlineSummary,
subset = mac != "00:0f:a3:39:dd:cd",
xlab = "Mean Signal", ylab = "SD Signal")
par(oldPar)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
with(offlineSummary,
smoothScatter((avgSignal - medSignal) ~ num,
xlab = "Number of Observations",
ylab = "mean - median"))
abline(h = 0, col = "#984ea3", lwd = 2)
lo.obj =
with(offlineSummary,
loess(diff ~ num,
data = data.frame(diff = (avgSignal - medSignal),
num = num)))
lo.obj.pr = predict(lo.obj, newdata = data.frame(num = (70:120)))
lines(x = 70:120, y = lo.obj.pr, col = "#4daf4a", lwd = 2)
par(oldPar)
subMacs
processLine = function(x){
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
tmp = matrix(tokens[ - (1:10) ], ncol= 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6,
byrow = TRUE), tmp)
}
roundOrientation = function(angles) {
refs = seq(0, by = 45, length  = 9)
q = sapply(angles, function(o) which.min(abs(o - refs)))
c(refs[1:8], 0)[q]
}
readData = function(filename = 'offline.final.trace.txt',
subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81"))  {
txt = readLines(filename)
lines = txt[ substr(txt, 1, 1) != "#" ]
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors= FALSE)
names(offline) = c("time", "scanMac",
"posX", "posY", "posZ", "orientation",
"mac", "signal", "channel", "type")
# keep only signals from access points
offline = offline[ offline$type == "3", ]
# drop scanMac, posZ, channel, and type - no info in them
dropVars = c("scanMac", "posZ", "channel", "type")
offline = offline[ , !( names(offline) %in% dropVars ) ]
# drop more unwanted access points
offline = offline[ offline$mac %in% subMacs, ]
# convert numeric values
numVars = c("time", "posX", "posY", "orientation", "signal")
offline[ numVars ] = lapply(offline[ numVars ], as.numeric)
# convert time to POSIX
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
# round orientations to nearest 45
offline$angle = roundOrientation(offline$orientation)
return(offline)
}
offline = readData(subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81", "00:0f:a3:39:dd:cd"))
subMacs = names(sort(table(offline$mac), decreasing = TRUE))
str(offline)
subMacs
processLine = function(x){
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
tmp = matrix(tokens[ - (1:10) ], ncol= 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6,
byrow = TRUE), tmp)
}
roundOrientation = function(angles) {
refs = seq(0, by = 45, length  = 9)
q = sapply(angles, function(o) which.min(abs(o - refs)))
c(refs[1:8], 0)[q]
}
readData = function(filename = 'offline.final.trace.txt',
subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81"))  {
txt = readLines(filename)
lines = txt[ substr(txt, 1, 1) != "#" ]
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors= FALSE)
names(offline) = c("time", "scanMac",
"posX", "posY", "posZ", "orientation",
"mac", "signal", "channel", "type")
# keep only signals from access points
offline = offline[ offline$type == "3", ]
# drop scanMac, posZ, channel, and type - no info in them
dropVars = c("scanMac", "posZ", "channel", "type")
offline = offline[ , !( names(offline) %in% dropVars ) ]
# drop more unwanted access points
offline = offline[ offline$mac %in% subMacs, ]
# convert numeric values
numVars = c("time", "posX", "posY", "orientation", "signal")
offline[ numVars ] = lapply(offline[ numVars ], as.numeric)
# convert time to POSIX
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
# round orientations to nearest 45
offline$angle = roundOrientation(offline$orientation)
return(offline)
}
offline = readData(subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81", "00:0f:a3:39:dd:cd"))
subMacs = names(sort(table(offline$mac), decreasing = TRUE))
str(offline)
subMacs
processLine = function(x){
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
tmp = matrix(tokens[ - (1:10) ], ncol= 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6,
byrow = TRUE), tmp)
}
roundOrientation = function(angles) {
refs = seq(0, by = 45, length  = 9)
q = sapply(angles, function(o) which.min(abs(o - refs)))
c(refs[1:8], 0)[q]
}
readData = function(filename = 'offline.final.trace.txt',
subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81"))  {
txt = readLines(filename)
lines = txt[ substr(txt, 1, 1) != "#" ]
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors= FALSE)
names(offline) = c("time", "scanMac",
"posX", "posY", "posZ", "orientation",
"mac", "signal", "channel", "type")
# keep only signals from access points
offline = offline[ offline$type == "3", ]
# drop scanMac, posZ, channel, and type - no info in them
dropVars = c("scanMac", "posZ", "channel", "type")
offline = offline[ , !( names(offline) %in% dropVars ) ]
# drop more unwanted access points
offline = offline[ offline$mac %in% subMacs, ]
# convert numeric values
numVars = c("time", "posX", "posY", "orientation", "signal")
offline[ numVars ] = lapply(offline[ numVars ], as.numeric)
# convert time to POSIX
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
# round orientations to nearest 45
offline$angle = roundOrientation(offline$orientation)
return(offline)
}
offline = readData(filename = 'offline.final.trace.txt', subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81", "00:0f:a3:39:dd:cd"))
subMacs = names(sort(table(offline$mac), decreasing = TRUE))
str(offline)
subMacs
processLine = function(x){
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
tmp = matrix(tokens[ - (1:10) ], ncol= 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6,
byrow = TRUE), tmp)
}
roundOrientation = function(angles) {
refs = seq(0, by = 45, length  = 9)
q = sapply(angles, function(o) which.min(abs(o - refs)))
c(refs[1:8], 0)[q]
}
readData = function(filename = 'offline.final.trace.txt',
subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81", "00:0f:a3:39:dd:cd"))  {
txt = readLines(filename)
lines = txt[ substr(txt, 1, 1) != "#" ]
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors= FALSE)
names(offline) = c("time", "scanMac",
"posX", "posY", "posZ", "orientation",
"mac", "signal", "channel", "type")
# keep only signals from access points
offline = offline[ offline$type == "3", ]
# drop scanMac, posZ, channel, and type - no info in them
dropVars = c("scanMac", "posZ", "channel", "type")
offline = offline[ , !( names(offline) %in% dropVars ) ]
# drop more unwanted access points
offline = offline[ offline$mac %in% subMacs, ]
# convert numeric values
numVars = c("time", "posX", "posY", "orientation", "signal")
offline[ numVars ] = lapply(offline[ numVars ], as.numeric)
# convert time to POSIX
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
# round orientations to nearest 45
offline$angle = roundOrientation(offline$orientation)
return(offline)
}
offline = readData(filename = 'offline.final.trace.txt', subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81", "00:0f:a3:39:dd:cd"))
subMacs = names(sort(table(offline$mac), decreasing = TRUE))
str(offline)
subMacs
processLine = function(x){
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
tmp = matrix(tokens[ - (1:10) ], ncol= 4, byrow = TRUE)
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6,
byrow = TRUE), tmp)
}
roundOrientation = function(angles) {
refs = seq(0, by = 45, length  = 9)
q = sapply(angles, function(o) which.min(abs(o - refs)))
c(refs[1:8], 0)[q]
}
readData = function(filename = 'offline.final.trace.txt',
subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81", "00:0f:a3:39:dd:cd"))  {
txt = readLines(filename)
lines = txt[ substr(txt, 1, 1) != "#" ]
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors= FALSE)
names(offline) = c("time", "scanMac",
"posX", "posY", "posZ", "orientation",
"mac", "signal", "channel", "type")
# keep only signals from access points
offline = offline[ offline$type == "3", ]
# drop scanMac, posZ, channel, and type - no info in them
dropVars = c("scanMac", "posZ", "channel", "type")
offline = offline[ , !( names(offline) %in% dropVars ) ]
# drop more unwanted access points
offline = offline[ offline$mac %in% subMacs, ]
# convert numeric values
numVars = c("time", "posX", "posY", "orientation", "signal")
offline[ numVars ] = lapply(offline[ numVars ], as.numeric)
# convert time to POSIX
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
# round orientations to nearest 45
offline$angle = roundOrientation(offline$orientation)
return(offline)
}
offline = readData()
subMacs = names(sort(table(offline$mac), decreasing = TRUE))
str(offline)
subMacs
