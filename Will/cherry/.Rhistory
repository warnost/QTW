miss_plot <- vis_miss(offline_pivot,warn_large_data = F)
# impute NA
#offline_pivot[is.na(offline_pivot)] <- -100
#online_pivot[is.na(online_pivot)] <- -100
# drop records with missing values
non_miss <- complete.cases(offline_pivot)
offline_pivot <- offline_pivot[non_miss,]
non_miss <- complete.cases(online_pivot)
online_pivot <- online_pivot[non_miss,]
# create categorical variable representing the x-y position
offline_pivot$posXY = paste(offline_pivot$posX, offline_pivot$posY, sep = "-")
online_pivot$posXY = paste(online_pivot$posX, online_pivot$posY, sep = "-")
online_pivot$posXY_round = paste(round(online_pivot$posX,digits=0), round(online_pivot$posY,digits=0), sep = "-")
# create 2 datasets for the 2 different models, offline_pivot has posXY and offline_pivot_x_y has both posX and posY
offline_pivot_x_y = offline_pivot
# remove variables that are not needed for modeling
offline_pivot = select(offline_pivot,-c(time, posX, posY, orientation, rawTime))
offline_pivot_x_y = select(offline_pivot_x_y,-c(time, orientation, rawTime, posXY))
# create 2 datasets for the 2 different models, offline_pivot has posXY and offline_pivot_x_y has both posX and posY
online_pivot_x_y = online_pivot
# remove variables that are not needed for modeling
online_pivot = select(online_pivot,-c(time, posX, posY, orientation, rawTime, posXY))
online_pivot = online_pivot %>% rename(posXY = posXY_round)
online_pivot_x_y = select(online_pivot_x_y,-c(time, orientation, rawTime, posXY_round))
########## Model Code ##########
# all 7 subMacs
set.seed(123)
trControl <- trainControl(method  = "cv", number  = 5)
fit <- train(posXY ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = seq(3,11,2)),
trControl  = trControl,
data       = offline_pivot,
preProcess = c("center","scale")
)
predict = predict(fit, newdata=online_pivot, type="raw")
accuracy <- as.data.frame(cbind(predict=as.factor(predict),actual=as.factor(online_pivot$posXY)))
accuracy$correct <- accuracy[,1] == accuracy[,2]
acc = sum(accuracy$correct)/length(accuracy$correct)
predict_split = str_split(predict, "-", simplify=TRUE)
actual_split = str_split(online_pivot$posXY, "-", simplify=TRUE)
mean_distance_error = mean(sqrt((as.numeric(predict_split[,1]) - as.numeric(actual_split[,1]))^2+(as.numeric(predict_split[,2]) - as.numeric(actual_split[,2]))^2))
# 6 subMacs, including 00:0f:a3:39:dd:cd
offline_pivot_6 = select(offline_pivot,-c(`00:0f:a3:39:e1:c0`))
online_pivot_6 = select(online_pivot,-c(`00:0f:a3:39:e1:c0`))
set.seed(123)
trControl <- trainControl(method  = "cv", number  = 5)
fit <- train(posXY ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = seq(3,11,2)),
trControl  = trControl,
data       = offline_pivot_6,
preProcess = c("center","scale")
)
predict = predict(fit, newdata=online_pivot_6, type="raw")
accuracy <- as.data.frame(cbind(predict=as.factor(predict),actual=as.factor(online_pivot_6$posXY)))
accuracy$correct <- accuracy[,1] == accuracy[,2]
acc = sum(accuracy$correct)/length(accuracy$correct)
predict_split = str_split(predict, "-", simplify=TRUE)
actual_split = str_split(online_pivot_6$posXY, "-", simplify=TRUE)
mean_distance_error = mean(sqrt((as.numeric(predict_split[,1]) - as.numeric(actual_split[,1]))^2+(as.numeric(predict_split[,2]) - as.numeric(actual_split[,2]))^2))
# 6 subMacs, including 00:0f:a3:39:e1:c0
offline_pivot_6 = select(offline_pivot,-c(`00:0f:a3:39:dd:cd`))
online_pivot_6 = select(online_pivot,-c(`00:0f:a3:39:dd:cd`))
set.seed(123)
trControl <- trainControl(method  = "cv", number  = 5)
fit <- train(posXY ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = seq(3,11,2)),
trControl  = trControl,
data       = offline_pivot_6,
preProcess = c("center","scale")
)
predict = predict(fit, newdata=online_pivot_6, type="raw")
accuracy <- as.data.frame(cbind(predict=as.factor(predict),actual=as.factor(online_pivot_6$posXY)))
accuracy$correct <- accuracy[,1] == accuracy[,2]
acc = sum(accuracy$correct)/length(accuracy$correct)
predict_split = str_split(predict, "-", simplify=TRUE)
actual_split = str_split(online_pivot_6$posXY, "-", simplify=TRUE)
mean_distance_error = mean(sqrt((as.numeric(predict_split[,1]) - as.numeric(actual_split[,1]))^2+(as.numeric(predict_split[,2]) - as.numeric(actual_split[,2]))^2))
# multi-target regression
# all 7 subMacs
X <- cbind(offline_pivot_x_y$`00:14:bf:b1:97:8a`,offline_pivot_x_y$`00:14:bf:b1:97:90`,offline_pivot_x_y$`00:0f:a3:39:e1:c0`,offline_pivot_x_y$`00:14:bf:b1:97:8d`,
offline_pivot_x_y$`00:14:bf:b1:97:81`,offline_pivot_x_y$`00:14:bf:3b:c7:c6`,offline_pivot_x_y$`00:0f:a3:39:dd:cd`,offline_pivot_x_y$angle)
fit <- plsr(cbind(posX,posY) ~ X, ncomp=8, data=offline_pivot_x_y, scale=TRUE, validation="CV", segments=5)
mean_distance_error <- mean(sqrt(fit$residuals[1]^2+fit$residuals[2]^2))
newX <- cbind(online_pivot_x_y$`00:14:bf:b1:97:8a`,online_pivot_x_y$`00:14:bf:b1:97:90`,online_pivot_x_y$`00:0f:a3:39:e1:c0`,online_pivot_x_y$`00:14:bf:b1:97:8d`,
online_pivot_x_y$`00:14:bf:b1:97:81`,online_pivot_x_y$`00:14:bf:3b:c7:c6`,online_pivot_x_y$`00:0f:a3:39:dd:cd`,online_pivot_x_y$angle)
predict <- predict(fit, ncomp=8, newdata=newX)
predict_df <- as.data.frame(predict)
names(predict_df) = c("posX","posY")
mean_distance_error <- mean(sqrt((online_pivot_x_y$posX - predict_df$posX)^2+(online_pivot_x_y$posY - predict_df$posY)^2))
# 6 subMacs, including 00:0f:a3:39:dd:cd
X <- cbind(offline_pivot_x_y$`00:14:bf:b1:97:8a`,offline_pivot_x_y$`00:14:bf:b1:97:90`,offline_pivot_x_y$`00:14:bf:b1:97:8d`,
offline_pivot_x_y$`00:14:bf:b1:97:81`,offline_pivot_x_y$`00:14:bf:3b:c7:c6`,offline_pivot_x_y$`00:0f:a3:39:dd:cd`,offline_pivot_x_y$angle)
fit <- plsr(cbind(posX,posY) ~ X, ncomp=7, data=offline_pivot_x_y, scale=TRUE, validation="CV", segments=5)
mean_distance_error <- mean(sqrt(fit$residuals[1]^2+fit$residuals[2]^2))
newX <- cbind(online_pivot_x_y$`00:14:bf:b1:97:8a`,online_pivot_x_y$`00:14:bf:b1:97:90`,online_pivot_x_y$`00:14:bf:b1:97:8d`,
online_pivot_x_y$`00:14:bf:b1:97:81`,online_pivot_x_y$`00:14:bf:3b:c7:c6`,online_pivot_x_y$`00:0f:a3:39:dd:cd`,online_pivot_x_y$angle)
predict <- predict(fit, ncomp=7, newdata=newX)
predict_df <- as.data.frame(predict)
names(predict_df) = c("posX","posY")
mean_distance_error <- mean(sqrt((online_pivot_x_y$posX - predict_df$posX)^2+(online_pivot_x_y$posY - predict_df$posY)^2))
# 6 subMacs, including 00:0f:a3:39:e1:c0
X <- cbind(offline_pivot_x_y$`00:14:bf:b1:97:8a`,offline_pivot_x_y$`00:14:bf:b1:97:90`,offline_pivot_x_y$`00:0f:a3:39:e1:c0`,offline_pivot_x_y$`00:14:bf:b1:97:8d`,
offline_pivot_x_y$`00:14:bf:b1:97:81`,offline_pivot_x_y$`00:14:bf:3b:c7:c6`,offline_pivot_x_y$angle)
fit <- plsr(cbind(posX,posY) ~ X, ncomp=7, data=offline_pivot_x_y, scale=TRUE, validation="CV", segments=5)
mean_distance_error <- mean(sqrt(fit$residuals[1]^2+fit$residuals[2]^2))
newX <- cbind(online_pivot_x_y$`00:14:bf:b1:97:8a`,online_pivot_x_y$`00:14:bf:b1:97:90`,online_pivot_x_y$`00:0f:a3:39:e1:c0`,online_pivot_x_y$`00:14:bf:b1:97:8d`,
online_pivot_x_y$`00:14:bf:b1:97:81`,online_pivot_x_y$`00:14:bf:3b:c7:c6`,online_pivot_x_y$angle)
predict <- predict(fit, ncomp=7, newdata=newX)
predict_df <- as.data.frame(predict)
names(predict_df) = c("posX","posY")
mean_distance_error <- mean(sqrt((online_pivot_x_y$posX - predict_df$posX)^2+(online_pivot_x_y$posY - predict_df$posY)^2))
# this is the first non-comment line in the text file
txt = readLines('../Data/offline.final.trace.txt')
txt[4]
caption <- "Figure 1: This plot shows where missing data is located in the data. We can see that some observations are missing signal strength for some access points"
caption <- paste0(strwrap(caption, 80), sep="", collapse="\n")
p + labs(title="Figure 1: Missing Signal Strength Data",
caption= caption) +
theme(plot.caption = element_text(hjust = 0, face= "italic"),
legend.title = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
caption <- "Figure 1: This plot shows where missing data is located in the data. We can see that some observations are missing signal strength for some access points"
caption <- paste0(strwrap(caption, 80), sep="", collapse="\n")
miss_plot + labs(title="Figure 1: Missing Signal Strength Data",
caption= caption) +
theme(plot.caption = element_text(hjust = 0, face= "italic"),
legend.title = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
library(readr)
parkin <- read_csv("C:/Users/William/Downloads/parkinsons_updrs.data")
View(parkin)
library(caret)
library(glmnet)
?caret
?train
train.control <- trainControl(method = "cv", number = 10)
tune.grid <- c(alpha=seq(0,1,0.01), lambda=c(c(1,2,5) %o% 10^(-1:-7)))
tune.grid <- expand.grid(alpha=seq(0,1,0.01), lambda=c(c(1,2,5) %o% 10^(-1:-7)))
fit <- train(total_UPDRS ~ ., data=parkin, tuneGrid = tune.grid, trControl = train.control)
fit <- train(total_UPDRS ~ ., data=parkin, method = "glmnet", tuneGrid = tune.grid, trControl = train.control)
fit
fit <- train(total_UPDRS ~ ., data=select(parkin, -c(motor_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control)
fit
fit <- train(motor_UPDRS~ ., data=select(parkin, -c(total_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control)
fit
?glmnet
fit <- train(motor_UPDRS~ ., data=select(parkin, -c(total_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control, family = "gaussian")
fit <- train(motor_UPDRS~ ., data=select(parkin, -c(total_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control, family = "poisson")
library(tidyverse)
library(naniar)
convertTime = function(time) {
timePieces = strsplit(time, ":")
timePieces = sapply(timePieces, as.numeric)
sapply(timePieces, function(x) {
if (length(x) == 2) x[1] + x[2]/60
else 60*x[1] + x[2] + x[3]/60
})
}
findColLocs = function(spacerRow) {
# starting indexes of columns
spaceLocs = gregexpr(" ", spacerRow)[[1]]
rowLength = nchar(spacerRow)
if (substring(spacerRow, rowLength, rowLength) != " ")
return( c(0, spaceLocs, rowLength + 1))
else return(c(0, spaceLocs))
}
selectCols = function(shortColNames, headerRow, searchLocs) {
sapply(shortColNames, function(shortName, headerRow, searchLocs){
startPos = regexpr(shortName, headerRow)[[1]]
if (startPos == -1) return( c(NA, NA) )
index = sum(startPos >= searchLocs)
#below is the change
c(searchLocs[index] + 1, searchLocs[index + 1])
}, headerRow = headerRow, searchLocs = searchLocs )
}
extractVariables = function(file,varNames =c("name", "home", "ag", "gun",
"net", "time")) {
# Find the index of the row with =s
eqIndex = grep("^===", file)
if(is_empty(eqIndex)) {
headerRow = tolower("PLACE NUM   NAME                  AG HOMETOWN           NET     GUN")
spacerRow ="===== ===== ===================== == ================== ======= ======="
body = file
} else {
# Extract the two key rows and the data
spacerRow = file[eqIndex]
headerRow = tolower(file[ eqIndex - 1 ])
body = file[ -(1 : eqIndex) ]
}
# I added this part to correct some issues happening in the women files, but it shouldn't affect the men files
headerRow = gsub('hometown',
'home    ', headerRow)
headerRow = gsub('gun tim',
'gun    ', headerRow)
headerRow = gsub('net tim',
'net    ', headerRow)
# Remove footnotes and blank rows
footnotes = grep("^[[:blank:]]*(\\*|\\#)", body)
if ( length(footnotes) > 0 ) body = body[ -footnotes ]
blanks = grep("^[[:blank:]]*$", body)
if (length(blanks) > 0 ) body = body[ -blanks ]
# Obtain the starting and ending positions of variables
searchLocs = findColLocs(spacerRow)
## 2006 has an issue with the column locations
if (grepl("2006",file[4])) searchLocs <- c(0,6,15,22,45,48,64,72,80,81,87,89)
locCols = selectCols(varNames, headerRow, searchLocs)
Values = mapply(substr, list(body), start = locCols[1, ],
stop = locCols[2, ])
colnames(Values) = varNames
return(Values)
}
createDF = function(Res, year, sex) {
# Determine which time to use
if ( !is.na(Res[1, 'net']) ) useTime = Res[ , 'net']
else if ( !is.na(Res[1, 'gun']) ) useTime = Res[ , 'gun']
else useTime = Res[ , 'time']
# Remove # and * and blanks from time
useTime = gsub("[#\\*[:blank:]]", "", useTime)
runTime = convertTime(useTime[ useTime != "" ])
# Drop rows with no time
Res = Res[ useTime != "", ]
Results = data.frame(year = rep(year, nrow(Res)),
sex = rep(sex, nrow(Res)),
name = Res[ , 'name'], home = Res[ , 'home'],
age = as.numeric(Res[, 'ag']),
runTime = runTime,
stringsAsFactors = FALSE)
invisible(Results)
}
## I would reccommend setting this to your working directory
setwd("C:/Users/William/OneDrive/MSDS_7331_QTW/QTW/Will/cherry")
## Load the mens tables
load(file = "CBMenTextTables.rda")
print("List menTables read in")
## Load the womens tables
load(file = "CBWomenTextTables.rda")
print("List womenTables read in")
menResMat = sapply(menTables, extractVariables)
menDF = mapply(createDF, menResMat, year = 1999:2012,
sex = rep("M", 14), SIMPLIFY = FALSE)
print("done")
#options(error=recover)
womenResMat = sapply(womenTables, extractVariables)
womenDF = mapply(createDF, womenResMat, year = 1999:2012,
sex = rep("F", 14), SIMPLIFY = FALSE)
#test <- extractVariables(womenTables$"2001")
#head(test)
?geom_density
library(gganimate)
library(wesanderson)
setwd("C:/Users/William/OneDrive/MSDS_7331_QTW/QTW/Will/cherry")
## reduce to complete cases
plt.data <- combined[complete.cases(combined),]
## Calculate Medians and annotation text
medians <- plt.data %>% select(year,age) %>% group_by(year) %>% summarise(median.age=median(age))
medians$text <- paste(medians$year, "Median Age:",medians$median.age)
only1999 <- plt.data %>% filter(year == 1999) %>% select(age)
## ggplot object
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, fill = black, alpha = 0.5)) +
geom_vline(data=medians, aes(xintercept=median.age),
linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=14, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
combined <- bind_rows(menDF)
gg_miss_var(combined)
## reduce to complete cases
plt.data <- combined[complete.cases(combined),]
## Calculate Medians and annotation text
medians <- plt.data %>% select(year,age) %>% group_by(year) %>% summarise(median.age=median(age))
medians$text <- paste(medians$year, "Median Age:",medians$median.age)
only1999 <- plt.data %>% filter(year == 1999) %>% select(age)
## ggplot object
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, fill = black, alpha = 0.5)) +
geom_vline(data=medians, aes(xintercept=median.age),
linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=14, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
med99 <-medians[medians$year == 1999,-c(year)]
med99 <-medians%>% filter(year == 1999) %>% select(median.age, text)
## ggplot object
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, fill = black, alpha = 0.5)) +
geom_vline(data=medians, aes(xintercept=median.age),
linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.4, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=14, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
animate(anim, duration = 40, end_pause = 20, height = 400, width = 600)
## ggplot object
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, fill = "black", alpha = 0.5)) +
geom_vline(data=medians, aes(xintercept=median.age),
linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.4, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=14, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
animate(anim, duration = 40, end_pause = 20, height = 400, width = 600)
## ggplot object
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, fill = "black", alpha = 0.5)) +
geom_vline(data=medians, aes(xintercept=median.age),
linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.4, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
animate(anim, duration = 40, end_pause = 20, height = 400, width = 600)
## ggplot object
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, alpha = 0.5)) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.4, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
animate(anim, duration = 40, end_pause = 20, height = 400, width = 600)
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, alpha = 0.5)) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.6, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
animate(anim, duration = 40, end_pause = 20, height = 400, width = 600)
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, alpha = 0.5)) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.9, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age)) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.9, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, color = "black")) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.9, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, color = "black")) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.9, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age, color = "black")) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.9, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
animate(anim, duration = 40, end_pause = 20, height = 400, width = 600)
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age)) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.9, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
## animate it
anim2 <- animate(anim, duration = 40, end_pause = 20, height = 400, width = 600)
## ggplot object
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age)) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.1, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
## animate it
anim2 <- animate(anim, duration = 40, end_pause = 20, height = 400, width = 600)
anim2
