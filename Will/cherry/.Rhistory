## Creating composite XY variable
offline$posXY = paste(offline$posX, offline$posY, sep = "-")
## create a dataframe for each combinations of posXY, angle, mac
byLocAngleAP = with(offline,
by(offline, list(posXY, angle, mac),
function(x) x))
## Summarize signal for each posXY, angle, mac
signalSummary =
lapply(byLocAngleAP,
function(oneLoc) {
ans = oneLoc[1, ]
ans$medSignal = median(oneLoc$signal)
ans$avgSignal = mean(oneLoc$signal)
ans$num = length(oneLoc$signal)
ans$sdSignal = sd(oneLoc$signal)
ans$iqrSignal = IQR(oneLoc$signal)
ans
})
offlineSummary = do.call("rbind", signalSummary)
## Creating composite XY variable
online$posXY = paste(online$posX, online$posY, sep = "-")
## create a dataframe for each combinations of posXY, angle, mac
byLocAngleAPOnline = with(online,
by(online, list(posXY, angle, mac),
function(x) x))
## Summarize signal for each posXY, angle, mac
signalSummaryOnline =
lapply(byLocAngleAPOnline,
function(oneLoc) {
ans = oneLoc[1, ]
ans$medSignal = median(oneLoc$signal)
ans$avgSignal = mean(oneLoc$signal)
ans$num = length(oneLoc$signal)
ans$sdSignal = sd(oneLoc$signal)
ans$iqrSignal = IQR(oneLoc$signal)
ans
})
#onlineSummary = do.call("rbind", signalSummaryOnline)
oldPar = par(mar = c(3.1, 3, 1, 1))
breaks = seq(-90, -30, by = 5)
bwplot(sdSignal ~ cut(avgSignal, breaks = breaks),
data = offlineSummary,
#subset = mac != "00:0f:a3:39:dd:cd",
xlab = "Mean Signal", ylab = "SD Signal")
par(oldPar)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
with(offlineSummary,
smoothScatter((avgSignal - medSignal) ~ num,
xlab = "Number of Observations",
ylab = "mean - median"))
abline(h = 0, col = "#984ea3", lwd = 2)
lo.obj =
with(offlineSummary,
loess(diff ~ num,
data = data.frame(diff = (avgSignal - medSignal),
num = num)))
lo.obj.pr = predict(lo.obj, newdata = data.frame(num = (70:120)))
lines(x = 70:120, y = lo.obj.pr, col = "#4daf4a", lwd = 2)
par(oldPar)
#oneAPAngle = subset(offlineSummary,
#                    mac == subMacs[1] & angle == 0)
library(fields)
#smoothSS = Tps(oneAPAngle[, c("posX","posY")],
#               oneAPAngle$avgSignal)
#vizSmooth = predictSurface(smoothSS)
#plot.surface(vizSmooth, type = "C")
#points(oneAPAngle$posX, oneAPAngle$posY, pch=19, cex = 0.5)
surfaceSS = function(data, mac, angle = 45) {
require(fields)
oneAPAngle = data[ data$mac == mac & data$angle == angle, ]
smoothSS = Tps(oneAPAngle[, c("posX","posY")],
oneAPAngle$avgSignal)
vizSmooth = predictSurface(smoothSS)
plot.surface(vizSmooth, type = "C",
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
points(oneAPAngle$posX, oneAPAngle$posY, pch=19, cex = 0.5)
}
parCur = par(mfrow = c(2,2), mar = rep(1, 4))
mapply(surfaceSS, mac = subMacs[ rep(c(2, 1), each = 2) ],
angle = rep(c(0, 135), 2),
data = list(data = offlineSummary))
par(parCur)
#offlineSummary = subset(offlineSummary, mac != subMacs[2])
AP = matrix( c( 7.5, 6.3, 7.5, 6.3, 2.5, -.8, 12.8, -2.8,
1, 14, 33.5, 9.3,  33.5, 2.8),
ncol = 2, byrow = TRUE,
dimnames = list(subMacs, c("x", "y") ))
AP
diffs = offlineSummary[ , c("posX", "posY")] -
AP[ offlineSummary$mac, ]
offlineSummary$dist = sqrt(diffs[ , 1]^2 + diffs[ , 2]^2)
oldPar = par(mar = c(3.1, 3.1, 1, 1))
library(lattice)
xyplot(signal ~ dist | factor(mac) + factor(angle),
data = offlineSummary, pch = 19, cex = 0.3,
xlab ="distance")
par(oldPar)
head(offlineSummary)
fit <- lm(cbind(posX,posY) ~ signal + angle, data=offlineSummary)
summary(fit)
library(knitr)
library(rmdformats)
library(formatR)
library(naniar)
library(tidyverse)
library(magrittr)
library(caret)
library(pls)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
########## Data Cleanup ##########
processLine = function(x){
tokens = strsplit(x, "[;=,]")[[1]]
if (length(tokens) == 10)
return(NULL)
# keep the last 4 columns related to measurements
tmp = matrix(tokens[ - (1:10) ], ncol= 4, byrow = TRUE)
# don't include columns 1, 3, 4, 9 because these are variable names
cbind(matrix(tokens[c(2, 4, 6:8, 10)], nrow(tmp), 6, byrow = TRUE), tmp)
}
roundOrientation = function(angles) {
refs = seq(0, by = 45, length  = 9)
q = sapply(angles, function(o) which.min(abs(o - refs)))
c(refs[1:8], 0)[q]
}
readData = function(filename = '../Data/offline.final.trace.txt',
subMacs = c("00:0f:a3:39:e1:c0", "00:0f:a3:39:dd:cd", "00:14:bf:b1:97:8a",
"00:14:bf:3b:c7:c6", "00:14:bf:b1:97:90", "00:14:bf:b1:97:8d",
"00:14:bf:b1:97:81"))  {
txt = readLines(filename)
#remove comments
lines = txt[ substr(txt, 1, 1) != "#" ]
#apply function to read and parse data
tmp = lapply(lines, processLine)
offline = as.data.frame(do.call("rbind", tmp),
stringsAsFactors= FALSE)
names(offline) = c("time", "scanMac",
"posX", "posY", "posZ", "orientation",
"mac", "signal", "channel", "type")
# keep only signals from access points
offline = offline[ offline$type == "3", ]
# drop scanMac, posZ, channel, and type - no info in them
dropVars = c("scanMac", "posZ", "channel", "type")
offline = offline[ , !( names(offline) %in% dropVars ) ]
# drop more unwanted access points
offline = offline[ offline$mac %in% subMacs, ]
# convert numeric values
numVars = c("time", "posX", "posY", "orientation", "signal")
offline[ numVars ] = lapply(offline[ numVars ], as.numeric)
# convert time to POSIX
offline$rawTime = offline$time
offline$time = offline$time/1000
class(offline$time) = c("POSIXt", "POSIXct")
# round orientations to nearest 45
offline$angle = roundOrientation(offline$orientation)
return(offline)
}
offline = readData(filename = '../Data/offline.final.trace.txt')
subMacs = names(sort(table(offline$mac), decreasing = TRUE))
online = readData(filename = '../Data/online.final.trace.txt')
# investigating frequency of measurements by mac address
vals = data.frame(table(mac=offline['mac']))
#vals[order(-vals$Freq),] #used table 2 instead
# format signal stength as an integer
offline$signal %<>% as.integer
online$signal %<>% as.integer
# remove channel and scanMac as they have no bearing on the analysis
# transpose long to wide so each of the 7 macs has a column
offline_pivot<-offline %>% pivot_wider(names_from = mac,values_from = signal, values_fn = list(signal=mean))
online_pivot<- online %>% pivot_wider(names_from = mac,values_from = signal, values_fn = list(signal=mean))
miss_plot <- vis_miss(offline_pivot,warn_large_data = F)
# impute NA
#offline_pivot[is.na(offline_pivot)] <- -100
#online_pivot[is.na(online_pivot)] <- -100
# drop records with missing values
non_miss <- complete.cases(offline_pivot)
offline_pivot <- offline_pivot[non_miss,]
non_miss <- complete.cases(online_pivot)
online_pivot <- online_pivot[non_miss,]
# create categorical variable representing the x-y position
offline_pivot$posXY = paste(offline_pivot$posX, offline_pivot$posY, sep = "-")
online_pivot$posXY = paste(online_pivot$posX, online_pivot$posY, sep = "-")
online_pivot$posXY_round = paste(round(online_pivot$posX,digits=0), round(online_pivot$posY,digits=0), sep = "-")
# create 2 datasets for the 2 different models, offline_pivot has posXY and offline_pivot_x_y has both posX and posY
offline_pivot_x_y = offline_pivot
# remove variables that are not needed for modeling
offline_pivot = select(offline_pivot,-c(time, posX, posY, orientation, rawTime))
offline_pivot_x_y = select(offline_pivot_x_y,-c(time, orientation, rawTime, posXY))
# create 2 datasets for the 2 different models, offline_pivot has posXY and offline_pivot_x_y has both posX and posY
online_pivot_x_y = online_pivot
# remove variables that are not needed for modeling
online_pivot = select(online_pivot,-c(time, posX, posY, orientation, rawTime, posXY))
online_pivot = online_pivot %>% rename(posXY = posXY_round)
online_pivot_x_y = select(online_pivot_x_y,-c(time, orientation, rawTime, posXY_round))
########## Model Code ##########
# all 7 subMacs
set.seed(123)
trControl <- trainControl(method  = "cv", number  = 5)
fit <- train(posXY ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = seq(3,11,2)),
trControl  = trControl,
data       = offline_pivot,
preProcess = c("center","scale")
)
predict = predict(fit, newdata=online_pivot, type="raw")
accuracy <- as.data.frame(cbind(predict=as.factor(predict),actual=as.factor(online_pivot$posXY)))
accuracy$correct <- accuracy[,1] == accuracy[,2]
acc = sum(accuracy$correct)/length(accuracy$correct)
predict_split = str_split(predict, "-", simplify=TRUE)
actual_split = str_split(online_pivot$posXY, "-", simplify=TRUE)
mean_distance_error = mean(sqrt((as.numeric(predict_split[,1]) - as.numeric(actual_split[,1]))^2+(as.numeric(predict_split[,2]) - as.numeric(actual_split[,2]))^2))
# 6 subMacs, including 00:0f:a3:39:dd:cd
offline_pivot_6 = select(offline_pivot,-c(`00:0f:a3:39:e1:c0`))
online_pivot_6 = select(online_pivot,-c(`00:0f:a3:39:e1:c0`))
set.seed(123)
trControl <- trainControl(method  = "cv", number  = 5)
fit <- train(posXY ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = seq(3,11,2)),
trControl  = trControl,
data       = offline_pivot_6,
preProcess = c("center","scale")
)
predict = predict(fit, newdata=online_pivot_6, type="raw")
accuracy <- as.data.frame(cbind(predict=as.factor(predict),actual=as.factor(online_pivot_6$posXY)))
accuracy$correct <- accuracy[,1] == accuracy[,2]
acc = sum(accuracy$correct)/length(accuracy$correct)
predict_split = str_split(predict, "-", simplify=TRUE)
actual_split = str_split(online_pivot_6$posXY, "-", simplify=TRUE)
mean_distance_error = mean(sqrt((as.numeric(predict_split[,1]) - as.numeric(actual_split[,1]))^2+(as.numeric(predict_split[,2]) - as.numeric(actual_split[,2]))^2))
# 6 subMacs, including 00:0f:a3:39:e1:c0
offline_pivot_6 = select(offline_pivot,-c(`00:0f:a3:39:dd:cd`))
online_pivot_6 = select(online_pivot,-c(`00:0f:a3:39:dd:cd`))
set.seed(123)
trControl <- trainControl(method  = "cv", number  = 5)
fit <- train(posXY ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = seq(3,11,2)),
trControl  = trControl,
data       = offline_pivot_6,
preProcess = c("center","scale")
)
predict = predict(fit, newdata=online_pivot_6, type="raw")
accuracy <- as.data.frame(cbind(predict=as.factor(predict),actual=as.factor(online_pivot_6$posXY)))
accuracy$correct <- accuracy[,1] == accuracy[,2]
acc = sum(accuracy$correct)/length(accuracy$correct)
predict_split = str_split(predict, "-", simplify=TRUE)
actual_split = str_split(online_pivot_6$posXY, "-", simplify=TRUE)
mean_distance_error = mean(sqrt((as.numeric(predict_split[,1]) - as.numeric(actual_split[,1]))^2+(as.numeric(predict_split[,2]) - as.numeric(actual_split[,2]))^2))
# multi-target regression
# all 7 subMacs
X <- cbind(offline_pivot_x_y$`00:14:bf:b1:97:8a`,offline_pivot_x_y$`00:14:bf:b1:97:90`,offline_pivot_x_y$`00:0f:a3:39:e1:c0`,offline_pivot_x_y$`00:14:bf:b1:97:8d`,
offline_pivot_x_y$`00:14:bf:b1:97:81`,offline_pivot_x_y$`00:14:bf:3b:c7:c6`,offline_pivot_x_y$`00:0f:a3:39:dd:cd`,offline_pivot_x_y$angle)
fit <- plsr(cbind(posX,posY) ~ X, ncomp=8, data=offline_pivot_x_y, scale=TRUE, validation="CV", segments=5)
mean_distance_error <- mean(sqrt(fit$residuals[1]^2+fit$residuals[2]^2))
newX <- cbind(online_pivot_x_y$`00:14:bf:b1:97:8a`,online_pivot_x_y$`00:14:bf:b1:97:90`,online_pivot_x_y$`00:0f:a3:39:e1:c0`,online_pivot_x_y$`00:14:bf:b1:97:8d`,
online_pivot_x_y$`00:14:bf:b1:97:81`,online_pivot_x_y$`00:14:bf:3b:c7:c6`,online_pivot_x_y$`00:0f:a3:39:dd:cd`,online_pivot_x_y$angle)
predict <- predict(fit, ncomp=8, newdata=newX)
predict_df <- as.data.frame(predict)
names(predict_df) = c("posX","posY")
mean_distance_error <- mean(sqrt((online_pivot_x_y$posX - predict_df$posX)^2+(online_pivot_x_y$posY - predict_df$posY)^2))
# 6 subMacs, including 00:0f:a3:39:dd:cd
X <- cbind(offline_pivot_x_y$`00:14:bf:b1:97:8a`,offline_pivot_x_y$`00:14:bf:b1:97:90`,offline_pivot_x_y$`00:14:bf:b1:97:8d`,
offline_pivot_x_y$`00:14:bf:b1:97:81`,offline_pivot_x_y$`00:14:bf:3b:c7:c6`,offline_pivot_x_y$`00:0f:a3:39:dd:cd`,offline_pivot_x_y$angle)
fit <- plsr(cbind(posX,posY) ~ X, ncomp=7, data=offline_pivot_x_y, scale=TRUE, validation="CV", segments=5)
mean_distance_error <- mean(sqrt(fit$residuals[1]^2+fit$residuals[2]^2))
newX <- cbind(online_pivot_x_y$`00:14:bf:b1:97:8a`,online_pivot_x_y$`00:14:bf:b1:97:90`,online_pivot_x_y$`00:14:bf:b1:97:8d`,
online_pivot_x_y$`00:14:bf:b1:97:81`,online_pivot_x_y$`00:14:bf:3b:c7:c6`,online_pivot_x_y$`00:0f:a3:39:dd:cd`,online_pivot_x_y$angle)
predict <- predict(fit, ncomp=7, newdata=newX)
predict_df <- as.data.frame(predict)
names(predict_df) = c("posX","posY")
mean_distance_error <- mean(sqrt((online_pivot_x_y$posX - predict_df$posX)^2+(online_pivot_x_y$posY - predict_df$posY)^2))
# 6 subMacs, including 00:0f:a3:39:e1:c0
X <- cbind(offline_pivot_x_y$`00:14:bf:b1:97:8a`,offline_pivot_x_y$`00:14:bf:b1:97:90`,offline_pivot_x_y$`00:0f:a3:39:e1:c0`,offline_pivot_x_y$`00:14:bf:b1:97:8d`,
offline_pivot_x_y$`00:14:bf:b1:97:81`,offline_pivot_x_y$`00:14:bf:3b:c7:c6`,offline_pivot_x_y$angle)
fit <- plsr(cbind(posX,posY) ~ X, ncomp=7, data=offline_pivot_x_y, scale=TRUE, validation="CV", segments=5)
mean_distance_error <- mean(sqrt(fit$residuals[1]^2+fit$residuals[2]^2))
newX <- cbind(online_pivot_x_y$`00:14:bf:b1:97:8a`,online_pivot_x_y$`00:14:bf:b1:97:90`,online_pivot_x_y$`00:0f:a3:39:e1:c0`,online_pivot_x_y$`00:14:bf:b1:97:8d`,
online_pivot_x_y$`00:14:bf:b1:97:81`,online_pivot_x_y$`00:14:bf:3b:c7:c6`,online_pivot_x_y$angle)
predict <- predict(fit, ncomp=7, newdata=newX)
predict_df <- as.data.frame(predict)
names(predict_df) = c("posX","posY")
mean_distance_error <- mean(sqrt((online_pivot_x_y$posX - predict_df$posX)^2+(online_pivot_x_y$posY - predict_df$posY)^2))
# this is the first non-comment line in the text file
txt = readLines('../Data/offline.final.trace.txt')
txt[4]
caption <- "Figure 1: This plot shows where missing data is located in the data. We can see that some observations are missing signal strength for some access points"
caption <- paste0(strwrap(caption, 80), sep="", collapse="\n")
p + labs(title="Figure 1: Missing Signal Strength Data",
caption= caption) +
theme(plot.caption = element_text(hjust = 0, face= "italic"),
legend.title = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
caption <- "Figure 1: This plot shows where missing data is located in the data. We can see that some observations are missing signal strength for some access points"
caption <- paste0(strwrap(caption, 80), sep="", collapse="\n")
miss_plot + labs(title="Figure 1: Missing Signal Strength Data",
caption= caption) +
theme(plot.caption = element_text(hjust = 0, face= "italic"),
legend.title = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
library(readr)
parkin <- read_csv("C:/Users/William/Downloads/parkinsons_updrs.data")
View(parkin)
library(caret)
library(glmnet)
?caret
?train
train.control <- trainControl(method = "cv", number = 10)
tune.grid <- c(alpha=seq(0,1,0.01), lambda=c(c(1,2,5) %o% 10^(-1:-7)))
tune.grid <- expand.grid(alpha=seq(0,1,0.01), lambda=c(c(1,2,5) %o% 10^(-1:-7)))
fit <- train(total_UPDRS ~ ., data=parkin, tuneGrid = tune.grid, trControl = train.control)
fit <- train(total_UPDRS ~ ., data=parkin, method = "glmnet", tuneGrid = tune.grid, trControl = train.control)
fit
fit <- train(total_UPDRS ~ ., data=select(parkin, -c(motor_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control)
fit
fit <- train(motor_UPDRS~ ., data=select(parkin, -c(total_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control)
fit
?glmnet
fit <- train(motor_UPDRS~ ., data=select(parkin, -c(total_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control, family = "gaussian")
fit <- train(motor_UPDRS~ ., data=select(parkin, -c(total_UPDRS)), method = "glmnet", tuneGrid = tune.grid, trControl = train.control, family = "poisson")
library(tidyverse)
library(naniar)
convertTime = function(time) {
timePieces = strsplit(time, ":")
timePieces = sapply(timePieces, as.numeric)
sapply(timePieces, function(x) {
if (length(x) == 2) x[1] + x[2]/60
else 60*x[1] + x[2] + x[3]/60
})
}
findColLocs = function(spacerRow) {
# starting indexes of columns
spaceLocs = gregexpr(" ", spacerRow)[[1]]
rowLength = nchar(spacerRow)
if (substring(spacerRow, rowLength, rowLength) != " ")
return( c(0, spaceLocs, rowLength + 1))
else return(c(0, spaceLocs))
}
selectCols = function(shortColNames, headerRow, searchLocs) {
sapply(shortColNames, function(shortName, headerRow, searchLocs){
startPos = regexpr(shortName, headerRow)[[1]]
if (startPos == -1) return( c(NA, NA) )
index = sum(startPos >= searchLocs)
#below is the change
c(searchLocs[index] + 1, searchLocs[index + 1])
}, headerRow = headerRow, searchLocs = searchLocs )
}
extractVariables = function(file,varNames =c("name", "home", "ag", "gun",
"net", "time")) {
# Find the index of the row with =s
eqIndex = grep("^===", file)
if(is_empty(eqIndex)) {
headerRow = tolower("PLACE NUM   NAME                  AG HOMETOWN           NET     GUN")
spacerRow ="===== ===== ===================== == ================== ======= ======="
body = file
} else {
# Extract the two key rows and the data
spacerRow = file[eqIndex]
headerRow = tolower(file[ eqIndex - 1 ])
body = file[ -(1 : eqIndex) ]
}
# I added this part to correct some issues happening in the women files, but it shouldn't affect the men files
headerRow = gsub('hometown',
'home    ', headerRow)
headerRow = gsub('gun tim',
'gun    ', headerRow)
headerRow = gsub('net tim',
'net    ', headerRow)
# Remove footnotes and blank rows
footnotes = grep("^[[:blank:]]*(\\*|\\#)", body)
if ( length(footnotes) > 0 ) body = body[ -footnotes ]
blanks = grep("^[[:blank:]]*$", body)
if (length(blanks) > 0 ) body = body[ -blanks ]
# Obtain the starting and ending positions of variables
searchLocs = findColLocs(spacerRow)
## 2006 has an issue with the column locations
if (grepl("2006",file[4])) searchLocs <- c(0,6,15,22,45,48,64,72,80,81,87,89)
locCols = selectCols(varNames, headerRow, searchLocs)
Values = mapply(substr, list(body), start = locCols[1, ],
stop = locCols[2, ])
colnames(Values) = varNames
return(Values)
}
createDF = function(Res, year, sex) {
# Determine which time to use
if ( !is.na(Res[1, 'net']) ) useTime = Res[ , 'net']
else if ( !is.na(Res[1, 'gun']) ) useTime = Res[ , 'gun']
else useTime = Res[ , 'time']
# Remove # and * and blanks from time
useTime = gsub("[#\\*[:blank:]]", "", useTime)
runTime = convertTime(useTime[ useTime != "" ])
# Drop rows with no time
Res = Res[ useTime != "", ]
Results = data.frame(year = rep(year, nrow(Res)),
sex = rep(sex, nrow(Res)),
name = Res[ , 'name'], home = Res[ , 'home'],
age = as.numeric(Res[, 'ag']),
runTime = runTime,
stringsAsFactors = FALSE)
invisible(Results)
}
## I would reccommend setting this to your working directory
setwd("C:/Users/William/OneDrive/MSDS_7331_QTW/QTW/Will/cherry")
## Load the mens tables
load(file = "CBMenTextTables.rda")
print("List menTables read in")
## Load the womens tables
load(file = "CBWomenTextTables.rda")
print("List womenTables read in")
menResMat = sapply(menTables, extractVariables)
menDF = mapply(createDF, menResMat, year = 1999:2012,
sex = rep("M", 14), SIMPLIFY = FALSE)
print("done")
#options(error=recover)
womenResMat = sapply(womenTables, extractVariables)
womenDF = mapply(createDF, womenResMat, year = 1999:2012,
sex = rep("F", 14), SIMPLIFY = FALSE)
#test <- extractVariables(womenTables$"2001")
#head(test)
lapply(womenDF, head)
lapply(womenDF, tail)
lapply(menDF, head)
lapply(menDF, gg_miss_var)
lapply(menDF, head)
combined <- bind_rows(menDF)
gg_miss_var(combined)
combinedW <- bind_rows(womenDF)
gg_miss_var(combinedW)
library(gganimate)
library(wesanderson)
setwd("C:/Users/William/OneDrive/MSDS_7331_QTW/QTW/Will/cherry")
## reduce to complete cases
plt.data <- combined[complete.cases(combined),]
## Calculate Medians and annotation text
medians <- plt.data %>% select(year,age) %>% group_by(year) %>% summarise(median.age=median(age))
medians$text <- paste(medians$year, "Median Age:",medians$median.age)
only1999 <- plt.data %>% filter(year == 1999) %>% select(age)
med99 <-medians%>% filter(year == 1999) %>% select(median.age, text)
## ggplot object
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age)) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=0.1, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
## animate it
anim2 <- animate(anim, fps = 60, duration = 40, end_pause = 20, height = 400, width = 600)
## animate it
anim2 <- animate(anim, fps = 10, duration = 40, end_pause = 20, height = 400, width = 600)
anim2
## ggplot object
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age)) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=1, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
## animate it
anim2 <- animate(anim, duration = 40, end_pause = 20, height = 400, width = 600)
anim2
## ggplot object
anim<-ggplot(plt.data) + geom_density(aes(x=age, fill=as.factor(year))) +
geom_density(data = only1999, aes(x=age)) +
geom_vline(data=medians, aes(xintercept=median.age), linetype="dashed") +
geom_vline(data=med99, aes(xintercept=median.age), linetype="dashed") +
geom_text(data=medians, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=-0.4, hjust=0) +
geom_text(data=med99, mapping=aes(x=median.age, y=0, label=text), size=4, angle=90, vjust=1.1, hjust=0) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=16),
plot.subtitle = element_text(size=16),
legend.title = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values=wes_palette(n=15, name="FantasticFox1", type = "continuous")) +
transition_time(year) +
labs(title = "Age Distribution of Cherry Blossom Runners (1999 - 2012)", subtitle = "Year: {frame_time}")
## animate it
anim2 <- animate(anim, duration = 40, end_pause = 20, height = 400, width = 600)
anim2
?geom_density
